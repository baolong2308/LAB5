
LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800383c  0800383c  0000483c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038d8  080038d8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080038d8  080038d8  000048d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038e0  080038e0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e0  080038e0  000048e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038e8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000005c  08003944  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08003944  0000529c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000893a  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a5c  00000000  00000000  0000d9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  0000f420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000607  00000000  00000000  0000fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001737d  00000000  00000000  0001020f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a450  00000000  00000000  0002758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084df7  00000000  00000000  000319dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b67d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023e0  00000000  00000000  000b6818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000b8bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003824 	.word	0x08003824

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003824 	.word	0x08003824

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_UART_RxCpltCallback>:
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
uint8_t command_flag = 0;
uint32_t ADC_value = 0;
char response[50];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a13      	ldr	r2, [pc, #76]	@ (80001b8 <HAL_UART_RxCpltCallback+0x5c>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d120      	bne.n	80001b0 <HAL_UART_RxCpltCallback+0x54>
		buffer[index_buffer++] = temp;
 800016e:	4b13      	ldr	r3, [pc, #76]	@ (80001bc <HAL_UART_RxCpltCallback+0x60>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	1c5a      	adds	r2, r3, #1
 8000174:	b2d1      	uxtb	r1, r2
 8000176:	4a11      	ldr	r2, [pc, #68]	@ (80001bc <HAL_UART_RxCpltCallback+0x60>)
 8000178:	7011      	strb	r1, [r2, #0]
 800017a:	461a      	mov	r2, r3
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <HAL_UART_RxCpltCallback+0x64>)
 800017e:	7819      	ldrb	r1, [r3, #0]
 8000180:	4b10      	ldr	r3, [pc, #64]	@ (80001c4 <HAL_UART_RxCpltCallback+0x68>)
 8000182:	5499      	strb	r1, [r3, r2]
		if (index_buffer == 30)
 8000184:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <HAL_UART_RxCpltCallback+0x60>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	2b1e      	cmp	r3, #30
 800018a:	d102      	bne.n	8000192 <HAL_UART_RxCpltCallback+0x36>
			index_buffer = 0;
 800018c:	4b0b      	ldr	r3, [pc, #44]	@ (80001bc <HAL_UART_RxCpltCallback+0x60>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000192:	4b0d      	ldr	r3, [pc, #52]	@ (80001c8 <HAL_UART_RxCpltCallback+0x6c>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	4909      	ldr	r1, [pc, #36]	@ (80001c0 <HAL_UART_RxCpltCallback+0x64>)
 800019c:	480b      	ldr	r0, [pc, #44]	@ (80001cc <HAL_UART_RxCpltCallback+0x70>)
 800019e:	f002 f902 	bl	80023a6 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2, &temp, 1, 1000);
 80001a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001a6:	2201      	movs	r2, #1
 80001a8:	4905      	ldr	r1, [pc, #20]	@ (80001c0 <HAL_UART_RxCpltCallback+0x64>)
 80001aa:	4808      	ldr	r0, [pc, #32]	@ (80001cc <HAL_UART_RxCpltCallback+0x70>)
 80001ac:	f002 f870 	bl	8002290 <HAL_UART_Transmit>

	}
}
 80001b0:	bf00      	nop
 80001b2:	3708      	adds	r7, #8
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40004400 	.word	0x40004400
 80001bc:	20000112 	.word	0x20000112
 80001c0:	200000f0 	.word	0x200000f0
 80001c4:	200000f4 	.word	0x200000f4
 80001c8:	20000113 	.word	0x20000113
 80001cc:	200000a8 	.word	0x200000a8

080001d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80001d4:	f000 fa8a 	bl	80006ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80001d8:	f000 f840 	bl	800025c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001dc:	f000 f8f6 	bl	80003cc <MX_GPIO_Init>
	MX_ADC1_Init();
 80001e0:	f000 f88c 	bl	80002fc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 80001e4:	f000 f8c8 	bl	8000378 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, &temp, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	4916      	ldr	r1, [pc, #88]	@ (8000244 <main+0x74>)
 80001ec:	4816      	ldr	r0, [pc, #88]	@ (8000248 <main+0x78>)
 80001ee:	f002 f8da 	bl	80023a6 <HAL_UART_Receive_IT>
	/* USER CODE BEGIN WHILE */
	//uint32_t ADC_value = 0;
	//char str[50]={1};
	while (1) {

		HAL_ADC_Start(&hadc1);
 80001f2:	4816      	ldr	r0, [pc, #88]	@ (800024c <main+0x7c>)
 80001f4:	f000 fbd8 	bl	80009a8 <HAL_ADC_Start>
		if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80001f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80001fc:	4813      	ldr	r0, [pc, #76]	@ (800024c <main+0x7c>)
 80001fe:	f000 fc81 	bl	8000b04 <HAL_ADC_PollForConversion>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d105      	bne.n	8000214 <main+0x44>
			ADC_value = HAL_ADC_GetValue(&hadc1);  // Lấy giá trị ADC
 8000208:	4810      	ldr	r0, [pc, #64]	@ (800024c <main+0x7c>)
 800020a:	f000 fd81 	bl	8000d10 <HAL_ADC_GetValue>
 800020e:	4603      	mov	r3, r0
 8000210:	4a0f      	ldr	r2, [pc, #60]	@ (8000250 <main+0x80>)
 8000212:	6013      	str	r3, [r2, #0]
		}

		// Tạo chuỗi phản hồi theo định dạng !ADC=<ADC_value>#
		sprintf(response, "!ADC=%lu#", ADC_value);
 8000214:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <main+0x80>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	490e      	ldr	r1, [pc, #56]	@ (8000254 <main+0x84>)
 800021c:	480e      	ldr	r0, [pc, #56]	@ (8000258 <main+0x88>)
 800021e:	f002 fe51 	bl	8002ec4 <siprintf>

		// Gửi chuỗi qua UART
		HAL_UART_Transmit(&huart2, (uint8_t*) response, strlen(response), 1000);
 8000222:	480d      	ldr	r0, [pc, #52]	@ (8000258 <main+0x88>)
 8000224:	f7ff ff92 	bl	800014c <strlen>
 8000228:	4603      	mov	r3, r0
 800022a:	b29a      	uxth	r2, r3
 800022c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000230:	4909      	ldr	r1, [pc, #36]	@ (8000258 <main+0x88>)
 8000232:	4805      	ldr	r0, [pc, #20]	@ (8000248 <main+0x78>)
 8000234:	f002 f82c 	bl	8002290 <HAL_UART_Transmit>

		HAL_Delay(500);  // Đợi một chút trước khi tiếp tục vòng lặp
 8000238:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800023c:	f000 fab8 	bl	80007b0 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000240:	e7d7      	b.n	80001f2 <main+0x22>
 8000242:	bf00      	nop
 8000244:	200000f0 	.word	0x200000f0
 8000248:	200000a8 	.word	0x200000a8
 800024c:	20000078 	.word	0x20000078
 8000250:	20000114 	.word	0x20000114
 8000254:	08003858 	.word	0x08003858
 8000258:	20000118 	.word	0x20000118

0800025c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	@ 0x50
 8000260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 fe4a 	bl	8002f04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000270:	f107 0314 	add.w	r3, r7, #20
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000280:	1d3b      	adds	r3, r7, #4
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	2302      	movs	r3, #2
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000290:	2301      	movs	r3, #1
 8000292:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000294:	2310      	movs	r3, #16
 8000296:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000298:	2300      	movs	r3, #0
 800029a:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800029c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fa29 	bl	80016f8 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x54>
		Error_Handler();
 80002ac:	f000 f8c0 	bl	8000430 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c0:	2300      	movs	r3, #0
 80002c2:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80002c4:	f107 0314 	add.w	r3, r7, #20
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f001 fc96 	bl	8001bfc <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x7e>
		Error_Handler();
 80002d6:	f000 f8ab 	bl	8000430 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002da:	2302      	movs	r3, #2
 80002dc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002de:	2300      	movs	r3, #0
 80002e0:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fe17 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x98>
		Error_Handler();
 80002f0:	f000 f89e 	bl	8000430 <Error_Handler>
	}
}
 80002f4:	bf00      	nop
 80002f6:	3750      	adds	r7, #80	@ 0x50
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 800030c:	4b18      	ldr	r3, [pc, #96]	@ (8000370 <MX_ADC1_Init+0x74>)
 800030e:	4a19      	ldr	r2, [pc, #100]	@ (8000374 <MX_ADC1_Init+0x78>)
 8000310:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000312:	4b17      	ldr	r3, [pc, #92]	@ (8000370 <MX_ADC1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000318:	4b15      	ldr	r3, [pc, #84]	@ (8000370 <MX_ADC1_Init+0x74>)
 800031a:	2201      	movs	r2, #1
 800031c:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b14      	ldr	r3, [pc, #80]	@ (8000370 <MX_ADC1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <MX_ADC1_Init+0x74>)
 8000326:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800032a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <MX_ADC1_Init+0x74>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <MX_ADC1_Init+0x74>)
 8000334:	2201      	movs	r2, #1
 8000336:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <MX_ADC1_Init+0x74>)
 800033a:	f000 fa5d 	bl	80007f8 <HAL_ADC_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000344:	f000 f874 	bl	8000430 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800034c:	2301      	movs	r3, #1
 800034e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	4619      	mov	r1, r3
 8000358:	4805      	ldr	r0, [pc, #20]	@ (8000370 <MX_ADC1_Init+0x74>)
 800035a:	f000 fce5 	bl	8000d28 <HAL_ADC_ConfigChannel>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000364:	f000 f864 	bl	8000430 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000368:	bf00      	nop
 800036a:	3710      	adds	r7, #16
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000078 	.word	0x20000078
 8000374:	40012400 	.word	0x40012400

08000378 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800037c:	4b11      	ldr	r3, [pc, #68]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	@ (80003c8 <MX_USART2_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8000382:	4b10      	ldr	r3, [pc, #64]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000384:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000388:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80003ae:	4805      	ldr	r0, [pc, #20]	@ (80003c4 <MX_USART2_UART_Init+0x4c>)
 80003b0:	f001 ff1e 	bl	80021f0 <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80003ba:	f000 f839 	bl	8000430 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	200000a8 	.word	0x200000a8
 80003c8:	40004400 	.word	0x40004400

080003cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003d2:	f107 0308 	add.w	r3, r7, #8
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003e0:	4b11      	ldr	r3, [pc, #68]	@ (8000428 <MX_GPIO_Init+0x5c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a10      	ldr	r2, [pc, #64]	@ (8000428 <MX_GPIO_Init+0x5c>)
 80003e6:	f043 0304 	orr.w	r3, r3, #4
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <MX_GPIO_Init+0x5c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0304 	and.w	r3, r3, #4
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2120      	movs	r1, #32
 80003fc:	480b      	ldr	r0, [pc, #44]	@ (800042c <MX_GPIO_Init+0x60>)
 80003fe:	f001 f963 	bl	80016c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8000402:	2320      	movs	r3, #32
 8000404:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2302      	movs	r3, #2
 8000410:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000412:	f107 0308 	add.w	r3, r7, #8
 8000416:	4619      	mov	r1, r3
 8000418:	4804      	ldr	r0, [pc, #16]	@ (800042c <MX_GPIO_Init+0x60>)
 800041a:	f000 ffd9 	bl	80013d0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800041e:	bf00      	nop
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000
 800042c:	40010800 	.word	0x40010800

08000430 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000442:	4b15      	ldr	r3, [pc, #84]	@ (8000498 <HAL_MspInit+0x5c>)
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4a14      	ldr	r2, [pc, #80]	@ (8000498 <HAL_MspInit+0x5c>)
 8000448:	f043 0301 	orr.w	r3, r3, #1
 800044c:	6193      	str	r3, [r2, #24]
 800044e:	4b12      	ldr	r3, [pc, #72]	@ (8000498 <HAL_MspInit+0x5c>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	60bb      	str	r3, [r7, #8]
 8000458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <HAL_MspInit+0x5c>)
 800045c:	69db      	ldr	r3, [r3, #28]
 800045e:	4a0e      	ldr	r2, [pc, #56]	@ (8000498 <HAL_MspInit+0x5c>)
 8000460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000464:	61d3      	str	r3, [r2, #28]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <HAL_MspInit+0x5c>)
 8000468:	69db      	ldr	r3, [r3, #28]
 800046a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000472:	4b0a      	ldr	r3, [pc, #40]	@ (800049c <HAL_MspInit+0x60>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000486:	60fb      	str	r3, [r7, #12]
 8000488:	4a04      	ldr	r2, [pc, #16]	@ (800049c <HAL_MspInit+0x60>)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	bc80      	pop	{r7}
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000
 800049c:	40010000 	.word	0x40010000

080004a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b088      	sub	sp, #32
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a8:	f107 0310 	add.w	r3, r7, #16
 80004ac:	2200      	movs	r2, #0
 80004ae:	601a      	str	r2, [r3, #0]
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	609a      	str	r2, [r3, #8]
 80004b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a14      	ldr	r2, [pc, #80]	@ (800050c <HAL_ADC_MspInit+0x6c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d121      	bne.n	8000504 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a12      	ldr	r2, [pc, #72]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80004d4:	60fb      	str	r3, [r7, #12]
 80004d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000510 <HAL_ADC_MspInit+0x70>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f003 0304 	and.w	r3, r3, #4
 80004ec:	60bb      	str	r3, [r7, #8]
 80004ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004f0:	2301      	movs	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004f4:	2303      	movs	r3, #3
 80004f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	4619      	mov	r1, r3
 80004fe:	4805      	ldr	r0, [pc, #20]	@ (8000514 <HAL_ADC_MspInit+0x74>)
 8000500:	f000 ff66 	bl	80013d0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40012400 	.word	0x40012400
 8000510:	40021000 	.word	0x40021000
 8000514:	40010800 	.word	0x40010800

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4a1f      	ldr	r2, [pc, #124]	@ (80005b0 <HAL_UART_MspInit+0x98>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d137      	bne.n	80005a8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000538:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 800053a:	69db      	ldr	r3, [r3, #28]
 800053c:	4a1d      	ldr	r2, [pc, #116]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 800053e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000542:	61d3      	str	r3, [r2, #28]
 8000544:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 8000546:	69db      	ldr	r3, [r3, #28]
 8000548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a17      	ldr	r2, [pc, #92]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <HAL_UART_MspInit+0x9c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000568:	2304      	movs	r3, #4
 800056a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000570:	2303      	movs	r3, #3
 8000572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	480f      	ldr	r0, [pc, #60]	@ (80005b8 <HAL_UART_MspInit+0xa0>)
 800057c:	f000 ff28 	bl	80013d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000580:	2308      	movs	r3, #8
 8000582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4809      	ldr	r0, [pc, #36]	@ (80005b8 <HAL_UART_MspInit+0xa0>)
 8000594:	f000 ff1c 	bl	80013d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2026      	movs	r0, #38	@ 0x26
 800059e:	f000 fe2e 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005a2:	2026      	movs	r0, #38	@ 0x26
 80005a4:	f000 fe47 	bl	8001236 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40004400 	.word	0x40004400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f4:	bf00      	nop
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr

08000608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800060c:	f000 f8b4 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}

08000614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000618:	4802      	ldr	r0, [pc, #8]	@ (8000624 <USART2_IRQHandler+0x10>)
 800061a:	f001 fee9 	bl	80023f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000a8 	.word	0x200000a8

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	@ (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f002 fc5c 	bl	8002f14 <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	@ (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	@ (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	@ (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20002800 	.word	0x20002800
 8000688:	00000400 	.word	0x00000400
 800068c:	2000014c 	.word	0x2000014c
 8000690:	200002a0 	.word	0x200002a0

08000694 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000698:	bf00      	nop
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr

080006a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006a0:	f7ff fff8 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480b      	ldr	r0, [pc, #44]	@ (80006d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a6:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a8:	4a0c      	ldr	r2, [pc, #48]	@ (80006dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a09      	ldr	r2, [pc, #36]	@ (80006e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006bc:	4c09      	ldr	r4, [pc, #36]	@ (80006e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ca:	f002 fc29 	bl	8002f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fd7f 	bl	80001d0 <main>
  bx lr
 80006d2:	4770      	bx	lr
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006dc:	080038e8 	.word	0x080038e8
  ldr r2, =_sbss
 80006e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e4:	2000029c 	.word	0x2000029c

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <HAL_Init+0x28>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a07      	ldr	r2, [pc, #28]	@ (8000714 <HAL_Init+0x28>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006fc:	2003      	movs	r0, #3
 80006fe:	f000 fd73 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000702:	200f      	movs	r0, #15
 8000704:	f000 f808 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000708:	f7ff fe98 	bl	800043c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_InitTick+0x54>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x58>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fd8b 	bl	8001252 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	e00e      	b.n	8000764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d80a      	bhi.n	8000762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800074c:	2200      	movs	r2, #0
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	f04f 30ff 	mov.w	r0, #4294967295
 8000754:	f000 fd53 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000758:	4a06      	ldr	r2, [pc, #24]	@ (8000774 <HAL_InitTick+0x5c>)
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	e000      	b.n	8000764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000762:	2301      	movs	r3, #1
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	20000008 	.word	0x20000008
 8000774:	20000004 	.word	0x20000004

08000778 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <HAL_IncTick+0x1c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x20>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a03      	ldr	r2, [pc, #12]	@ (8000798 <HAL_IncTick+0x20>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	20000008 	.word	0x20000008
 8000798:	20000150 	.word	0x20000150

0800079c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return uwTick;
 80007a0:	4b02      	ldr	r3, [pc, #8]	@ (80007ac <HAL_GetTick+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	20000150 	.word	0x20000150

080007b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007b8:	f7ff fff0 	bl	800079c <HAL_GetTick>
 80007bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007c8:	d005      	beq.n	80007d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <HAL_Delay+0x44>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d6:	bf00      	nop
 80007d8:	f7ff ffe0 	bl	800079c <HAL_GetTick>
 80007dc:	4602      	mov	r2, r0
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	d8f7      	bhi.n	80007d8 <HAL_Delay+0x28>
  {
  }
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000008 	.word	0x20000008

080007f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000800:	2300      	movs	r3, #0
 8000802:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d101      	bne.n	800081a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e0be      	b.n	8000998 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000824:	2b00      	cmp	r3, #0
 8000826:	d109      	bne.n	800083c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe32 	bl	80004a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f000 fbc5 	bl	8000fcc <ADC_ConversionStop_Disable>
 8000842:	4603      	mov	r3, r0
 8000844:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	2b00      	cmp	r3, #0
 8000850:	f040 8099 	bne.w	8000986 <HAL_ADC_Init+0x18e>
 8000854:	7dfb      	ldrb	r3, [r7, #23]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f040 8095 	bne.w	8000986 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000860:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000864:	f023 0302 	bic.w	r3, r3, #2
 8000868:	f043 0202 	orr.w	r2, r3, #2
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000878:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	7b1b      	ldrb	r3, [r3, #12]
 800087e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000880:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	4313      	orrs	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000890:	d003      	beq.n	800089a <HAL_ADC_Init+0xa2>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d102      	bne.n	80008a0 <HAL_ADC_Init+0xa8>
 800089a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800089e:	e000      	b.n	80008a2 <HAL_ADC_Init+0xaa>
 80008a0:	2300      	movs	r3, #0
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7d1b      	ldrb	r3, [r3, #20]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d119      	bne.n	80008e4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7b1b      	ldrb	r3, [r3, #12]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d109      	bne.n	80008cc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	3b01      	subs	r3, #1
 80008be:	035a      	lsls	r2, r3, #13
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008c8:	613b      	str	r3, [r7, #16]
 80008ca:	e00b      	b.n	80008e4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d0:	f043 0220 	orr.w	r2, r3, #32
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008dc:	f043 0201 	orr.w	r2, r3, #1
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <HAL_ADC_Init+0x1a8>)
 8000900:	4013      	ands	r3, r2
 8000902:	687a      	ldr	r2, [r7, #4]
 8000904:	6812      	ldr	r2, [r2, #0]
 8000906:	68b9      	ldr	r1, [r7, #8]
 8000908:	430b      	orrs	r3, r1
 800090a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000914:	d003      	beq.n	800091e <HAL_ADC_Init+0x126>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d104      	bne.n	8000928 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	3b01      	subs	r3, #1
 8000924:	051b      	lsls	r3, r3, #20
 8000926:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800092e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	430a      	orrs	r2, r1
 800093a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	689a      	ldr	r2, [r3, #8]
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_ADC_Init+0x1ac>)
 8000944:	4013      	ands	r3, r2
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	429a      	cmp	r2, r3
 800094a:	d10b      	bne.n	8000964 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000956:	f023 0303 	bic.w	r3, r3, #3
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000962:	e018      	b.n	8000996 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000968:	f023 0312 	bic.w	r3, r3, #18
 800096c:	f043 0210 	orr.w	r2, r3, #16
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000978:	f043 0201 	orr.w	r2, r3, #1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000984:	e007      	b.n	8000996 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800098a:	f043 0210 	orr.w	r2, r3, #16
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000996:	7dfb      	ldrb	r3, [r7, #23]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	ffe1f7fd 	.word	0xffe1f7fd
 80009a4:	ff1f0efe 	.word	0xff1f0efe

080009a8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d101      	bne.n	80009c2 <HAL_ADC_Start+0x1a>
 80009be:	2302      	movs	r3, #2
 80009c0:	e098      	b.n	8000af4 <HAL_ADC_Start+0x14c>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 faa4 	bl	8000f18 <ADC_Enable>
 80009d0:	4603      	mov	r3, r0
 80009d2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8087 	bne.w	8000aea <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009e4:	f023 0301 	bic.w	r3, r3, #1
 80009e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a41      	ldr	r2, [pc, #260]	@ (8000afc <HAL_ADC_Start+0x154>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d105      	bne.n	8000a06 <HAL_ADC_Start+0x5e>
 80009fa:	4b41      	ldr	r3, [pc, #260]	@ (8000b00 <HAL_ADC_Start+0x158>)
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d115      	bne.n	8000a32 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d026      	beq.n	8000a6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a24:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a28:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a30:	e01d      	b.n	8000a6e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a2f      	ldr	r2, [pc, #188]	@ (8000b00 <HAL_ADC_Start+0x158>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d004      	beq.n	8000a52 <HAL_ADC_Start+0xaa>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <HAL_ADC_Start+0x154>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d10d      	bne.n	8000a6e <HAL_ADC_Start+0xc6>
 8000a52:	4b2b      	ldr	r3, [pc, #172]	@ (8000b00 <HAL_ADC_Start+0x158>)
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d007      	beq.n	8000a6e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a62:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a66:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	f023 0206 	bic.w	r2, r3, #6
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a86:	e002      	b.n	8000a8e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f06f 0202 	mvn.w	r2, #2
 8000a9e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000aaa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000aae:	d113      	bne.n	8000ad8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ab4:	4a11      	ldr	r2, [pc, #68]	@ (8000afc <HAL_ADC_Start+0x154>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d105      	bne.n	8000ac6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_ADC_Start+0x158>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d108      	bne.n	8000ad8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	e00c      	b.n	8000af2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	e003      	b.n	8000af2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	40012800 	.word	0x40012800
 8000b00:	40012400 	.word	0x40012400

08000b04 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b087      	sub	sp, #28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b1a:	f7ff fe3f 	bl	800079c <HAL_GetTick>
 8000b1e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d00b      	beq.n	8000b46 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b32:	f043 0220 	orr.w	r2, r3, #32
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0d3      	b.n	8000cee <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d131      	bne.n	8000bb8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b5a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d12a      	bne.n	8000bb8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b62:	e021      	b.n	8000ba8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6a:	d01d      	beq.n	8000ba8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <HAL_ADC_PollForConversion+0x7e>
 8000b72:	f7ff fe13 	bl	800079c <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d212      	bcs.n	8000ba8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d10b      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b94:	f043 0204 	orr.w	r2, r3, #4
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	e0a2      	b.n	8000cee <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0d6      	beq.n	8000b64 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bb6:	e070      	b.n	8000c9a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf8 <HAL_ADC_PollForConversion+0x1f4>)
 8000bba:	681c      	ldr	r4, [r3, #0]
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f001 fa61 	bl	8002084 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	6919      	ldr	r1, [r3, #16]
 8000bce:	4b4b      	ldr	r3, [pc, #300]	@ (8000cfc <HAL_ADC_PollForConversion+0x1f8>)
 8000bd0:	400b      	ands	r3, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d118      	bne.n	8000c08 <HAL_ADC_PollForConversion+0x104>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68d9      	ldr	r1, [r3, #12]
 8000bdc:	4b48      	ldr	r3, [pc, #288]	@ (8000d00 <HAL_ADC_PollForConversion+0x1fc>)
 8000bde:	400b      	ands	r3, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d111      	bne.n	8000c08 <HAL_ADC_PollForConversion+0x104>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	6919      	ldr	r1, [r3, #16]
 8000bea:	4b46      	ldr	r3, [pc, #280]	@ (8000d04 <HAL_ADC_PollForConversion+0x200>)
 8000bec:	400b      	ands	r3, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d108      	bne.n	8000c04 <HAL_ADC_PollForConversion+0x100>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	68d9      	ldr	r1, [r3, #12]
 8000bf8:	4b43      	ldr	r3, [pc, #268]	@ (8000d08 <HAL_ADC_PollForConversion+0x204>)
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d101      	bne.n	8000c04 <HAL_ADC_PollForConversion+0x100>
 8000c00:	2314      	movs	r3, #20
 8000c02:	e020      	b.n	8000c46 <HAL_ADC_PollForConversion+0x142>
 8000c04:	2329      	movs	r3, #41	@ 0x29
 8000c06:	e01e      	b.n	8000c46 <HAL_ADC_PollForConversion+0x142>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	6919      	ldr	r1, [r3, #16]
 8000c0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d04 <HAL_ADC_PollForConversion+0x200>)
 8000c10:	400b      	ands	r3, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d106      	bne.n	8000c24 <HAL_ADC_PollForConversion+0x120>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68d9      	ldr	r1, [r3, #12]
 8000c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d08 <HAL_ADC_PollForConversion+0x204>)
 8000c1e:	400b      	ands	r3, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00d      	beq.n	8000c40 <HAL_ADC_PollForConversion+0x13c>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6919      	ldr	r1, [r3, #16]
 8000c2a:	4b38      	ldr	r3, [pc, #224]	@ (8000d0c <HAL_ADC_PollForConversion+0x208>)
 8000c2c:	400b      	ands	r3, r1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x140>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68d9      	ldr	r1, [r3, #12]
 8000c38:	4b34      	ldr	r3, [pc, #208]	@ (8000d0c <HAL_ADC_PollForConversion+0x208>)
 8000c3a:	400b      	ands	r3, r1
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d101      	bne.n	8000c44 <HAL_ADC_PollForConversion+0x140>
 8000c40:	2354      	movs	r3, #84	@ 0x54
 8000c42:	e000      	b.n	8000c46 <HAL_ADC_PollForConversion+0x142>
 8000c44:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c46:	fb02 f303 	mul.w	r3, r2, r3
 8000c4a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c4c:	e021      	b.n	8000c92 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d01a      	beq.n	8000c8c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <HAL_ADC_PollForConversion+0x168>
 8000c5c:	f7ff fd9e 	bl	800079c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d20f      	bcs.n	8000c8c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d90b      	bls.n	8000c8c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	f043 0204 	orr.w	r2, r3, #4
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000c88:	2303      	movs	r3, #3
 8000c8a:	e030      	b.n	8000cee <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d8d9      	bhi.n	8000c4e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f06f 0212 	mvn.w	r2, #18
 8000ca2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cbe:	d115      	bne.n	8000cec <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d111      	bne.n	8000cec <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ccc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce4:	f043 0201 	orr.w	r2, r3, #1
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd90      	pop	{r4, r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	24924924 	.word	0x24924924
 8000d00:	00924924 	.word	0x00924924
 8000d04:	12492492 	.word	0x12492492
 8000d08:	00492492 	.word	0x00492492
 8000d0c:	00249249 	.word	0x00249249

08000d10 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d101      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x20>
 8000d44:	2302      	movs	r3, #2
 8000d46:	e0dc      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x1da>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b06      	cmp	r3, #6
 8000d56:	d81c      	bhi.n	8000d92 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685a      	ldr	r2, [r3, #4]
 8000d62:	4613      	mov	r3, r2
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4413      	add	r3, r2
 8000d68:	3b05      	subs	r3, #5
 8000d6a:	221f      	movs	r2, #31
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4019      	ands	r1, r3
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	4413      	add	r3, r2
 8000d82:	3b05      	subs	r3, #5
 8000d84:	fa00 f203 	lsl.w	r2, r0, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d90:	e03c      	b.n	8000e0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b0c      	cmp	r3, #12
 8000d98:	d81c      	bhi.n	8000dd4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3b23      	subs	r3, #35	@ 0x23
 8000dac:	221f      	movs	r2, #31
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4019      	ands	r1, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b23      	subs	r3, #35	@ 0x23
 8000dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dd2:	e01b      	b.n	8000e0c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	3b41      	subs	r3, #65	@ 0x41
 8000de6:	221f      	movs	r2, #31
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4019      	ands	r1, r3
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3b41      	subs	r3, #65	@ 0x41
 8000e00:	fa00 f203 	lsl.w	r2, r0, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b09      	cmp	r3, #9
 8000e12:	d91c      	bls.n	8000e4e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68d9      	ldr	r1, [r3, #12]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	4413      	add	r3, r2
 8000e24:	3b1e      	subs	r3, #30
 8000e26:	2207      	movs	r2, #7
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	4019      	ands	r1, r3
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	6898      	ldr	r0, [r3, #8]
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b1e      	subs	r3, #30
 8000e40:	fa00 f203 	lsl.w	r2, r0, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	e019      	b.n	8000e82 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6919      	ldr	r1, [r3, #16]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4413      	add	r3, r2
 8000e5e:	2207      	movs	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	4019      	ands	r1, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	6898      	ldr	r0, [r3, #8]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	fa00 f203 	lsl.w	r2, r0, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b10      	cmp	r3, #16
 8000e88:	d003      	beq.n	8000e92 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e8e:	2b11      	cmp	r3, #17
 8000e90:	d132      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <HAL_ADC_ConfigChannel+0x1e4>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d125      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d126      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000eb8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b10      	cmp	r3, #16
 8000ec0:	d11a      	bne.n	8000ef8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ec2:	4b13      	ldr	r3, [pc, #76]	@ (8000f10 <HAL_ADC_ConfigChannel+0x1e8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a13      	ldr	r2, [pc, #76]	@ (8000f14 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ecc:	0c9a      	lsrs	r2, r3, #18
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed8:	e002      	b.n	8000ee0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	3b01      	subs	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f9      	bne.n	8000eda <HAL_ADC_ConfigChannel+0x1b2>
 8000ee6:	e007      	b.n	8000ef8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eec:	f043 0220 	orr.w	r2, r3, #32
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40012400 	.word	0x40012400
 8000f10:	20000000 	.word	0x20000000
 8000f14:	431bde83 	.word	0x431bde83

08000f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d040      	beq.n	8000fb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f46:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc4 <ADC_Enable+0xac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc8 <ADC_Enable+0xb0>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	0c9b      	lsrs	r3, r3, #18
 8000f52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f54:	e002      	b.n	8000f5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f9      	bne.n	8000f56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f62:	f7ff fc1b 	bl	800079c <HAL_GetTick>
 8000f66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f68:	e01f      	b.n	8000faa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f6a:	f7ff fc17 	bl	800079c <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d918      	bls.n	8000faa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d011      	beq.n	8000faa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8a:	f043 0210 	orr.w	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e007      	b.n	8000fba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d1d8      	bne.n	8000f6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	431bde83 	.word	0x431bde83

08000fcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d12e      	bne.n	8001044 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f022 0201 	bic.w	r2, r2, #1
 8000ff4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fbd1 	bl	800079c <HAL_GetTick>
 8000ffa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ffc:	e01b      	b.n	8001036 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ffe:	f7ff fbcd 	bl	800079c <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d914      	bls.n	8001036 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10d      	bne.n	8001036 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e007      	b.n	8001046 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b01      	cmp	r3, #1
 8001042:	d0dc      	beq.n	8000ffe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4906      	ldr	r1, [pc, #24]	@ (80010e8 <__NVIC_EnableIRQ+0x34>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff90 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff2d 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff42 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff35 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d008      	beq.n	8001294 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e020      	b.n	80012d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 020e 	bic.w	r2, r2, #14
 80012a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0201 	bic.w	r2, r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d005      	beq.n	8001304 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2204      	movs	r2, #4
 80012fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e051      	b.n	80013a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 020e 	bic.w	r2, r2, #14
 8001312:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0201 	bic.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a22      	ldr	r2, [pc, #136]	@ (80013b4 <HAL_DMA_Abort_IT+0xd4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d029      	beq.n	8001382 <HAL_DMA_Abort_IT+0xa2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a21      	ldr	r2, [pc, #132]	@ (80013b8 <HAL_DMA_Abort_IT+0xd8>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d022      	beq.n	800137e <HAL_DMA_Abort_IT+0x9e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <HAL_DMA_Abort_IT+0xdc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01a      	beq.n	8001378 <HAL_DMA_Abort_IT+0x98>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1e      	ldr	r2, [pc, #120]	@ (80013c0 <HAL_DMA_Abort_IT+0xe0>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d012      	beq.n	8001372 <HAL_DMA_Abort_IT+0x92>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <HAL_DMA_Abort_IT+0xe4>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00a      	beq.n	800136c <HAL_DMA_Abort_IT+0x8c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a1b      	ldr	r2, [pc, #108]	@ (80013c8 <HAL_DMA_Abort_IT+0xe8>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <HAL_DMA_Abort_IT+0x86>
 8001360:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001364:	e00e      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136a:	e00b      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 800136c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001370:	e008      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001372:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001376:	e005      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001378:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137c:	e002      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 800137e:	2310      	movs	r3, #16
 8001380:	e000      	b.n	8001384 <HAL_DMA_Abort_IT+0xa4>
 8001382:	2301      	movs	r3, #1
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_DMA_Abort_IT+0xec>)
 8001386:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
    } 
  }
  return status;
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40020008 	.word	0x40020008
 80013b8:	4002001c 	.word	0x4002001c
 80013bc:	40020030 	.word	0x40020030
 80013c0:	40020044 	.word	0x40020044
 80013c4:	40020058 	.word	0x40020058
 80013c8:	4002006c 	.word	0x4002006c
 80013cc:	40020000 	.word	0x40020000

080013d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e2:	e161      	b.n	80016a8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e4:	2201      	movs	r2, #1
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	4013      	ands	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f040 8150 	bne.w	80016a2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a97      	ldr	r2, [pc, #604]	@ (8001664 <HAL_GPIO_Init+0x294>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d05e      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800140c:	4a95      	ldr	r2, [pc, #596]	@ (8001664 <HAL_GPIO_Init+0x294>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d875      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001412:	4a95      	ldr	r2, [pc, #596]	@ (8001668 <HAL_GPIO_Init+0x298>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d058      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001418:	4a93      	ldr	r2, [pc, #588]	@ (8001668 <HAL_GPIO_Init+0x298>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d86f      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800141e:	4a93      	ldr	r2, [pc, #588]	@ (800166c <HAL_GPIO_Init+0x29c>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d052      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001424:	4a91      	ldr	r2, [pc, #580]	@ (800166c <HAL_GPIO_Init+0x29c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d869      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800142a:	4a91      	ldr	r2, [pc, #580]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d04c      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 8001430:	4a8f      	ldr	r2, [pc, #572]	@ (8001670 <HAL_GPIO_Init+0x2a0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d863      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001436:	4a8f      	ldr	r2, [pc, #572]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d046      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
 800143c:	4a8d      	ldr	r2, [pc, #564]	@ (8001674 <HAL_GPIO_Init+0x2a4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d85d      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d82a      	bhi.n	800149c <HAL_GPIO_Init+0xcc>
 8001446:	2b12      	cmp	r3, #18
 8001448:	d859      	bhi.n	80014fe <HAL_GPIO_Init+0x12e>
 800144a:	a201      	add	r2, pc, #4	@ (adr r2, 8001450 <HAL_GPIO_Init+0x80>)
 800144c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014a5 	.word	0x080014a5
 8001458:	080014b7 	.word	0x080014b7
 800145c:	080014f9 	.word	0x080014f9
 8001460:	080014ff 	.word	0x080014ff
 8001464:	080014ff 	.word	0x080014ff
 8001468:	080014ff 	.word	0x080014ff
 800146c:	080014ff 	.word	0x080014ff
 8001470:	080014ff 	.word	0x080014ff
 8001474:	080014ff 	.word	0x080014ff
 8001478:	080014ff 	.word	0x080014ff
 800147c:	080014ff 	.word	0x080014ff
 8001480:	080014ff 	.word	0x080014ff
 8001484:	080014ff 	.word	0x080014ff
 8001488:	080014ff 	.word	0x080014ff
 800148c:	080014ff 	.word	0x080014ff
 8001490:	080014ff 	.word	0x080014ff
 8001494:	080014ad 	.word	0x080014ad
 8001498:	080014c1 	.word	0x080014c1
 800149c:	4a76      	ldr	r2, [pc, #472]	@ (8001678 <HAL_GPIO_Init+0x2a8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014a2:	e02c      	b.n	80014fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e029      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	3304      	adds	r3, #4
 80014b2:	623b      	str	r3, [r7, #32]
          break;
 80014b4:	e024      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	3308      	adds	r3, #8
 80014bc:	623b      	str	r3, [r7, #32]
          break;
 80014be:	e01f      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	330c      	adds	r3, #12
 80014c6:	623b      	str	r3, [r7, #32]
          break;
 80014c8:	e01a      	b.n	8001500 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d2:	2304      	movs	r3, #4
 80014d4:	623b      	str	r3, [r7, #32]
          break;
 80014d6:	e013      	b.n	8001500 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69fa      	ldr	r2, [r7, #28]
 80014e8:	611a      	str	r2, [r3, #16]
          break;
 80014ea:	e009      	b.n	8001500 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014ec:	2308      	movs	r3, #8
 80014ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	615a      	str	r2, [r3, #20]
          break;
 80014f6:	e003      	b.n	8001500 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
          break;
 80014fc:	e000      	b.n	8001500 <HAL_GPIO_Init+0x130>
          break;
 80014fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2bff      	cmp	r3, #255	@ 0xff
 8001504:	d801      	bhi.n	800150a <HAL_GPIO_Init+0x13a>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	e001      	b.n	800150e <HAL_GPIO_Init+0x13e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3304      	adds	r3, #4
 800150e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2bff      	cmp	r3, #255	@ 0xff
 8001514:	d802      	bhi.n	800151c <HAL_GPIO_Init+0x14c>
 8001516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x152>
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	3b08      	subs	r3, #8
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	210f      	movs	r1, #15
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	fa01 f303 	lsl.w	r3, r1, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	401a      	ands	r2, r3
 8001534:	6a39      	ldr	r1, [r7, #32]
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	431a      	orrs	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 80a9 	beq.w	80016a2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001550:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a49      	ldr	r2, [pc, #292]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b47      	ldr	r3, [pc, #284]	@ (800167c <HAL_GPIO_Init+0x2ac>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001568:	4a45      	ldr	r2, [pc, #276]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a3d      	ldr	r2, [pc, #244]	@ (8001684 <HAL_GPIO_Init+0x2b4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00d      	beq.n	80015b0 <HAL_GPIO_Init+0x1e0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a3c      	ldr	r2, [pc, #240]	@ (8001688 <HAL_GPIO_Init+0x2b8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0x1dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <HAL_GPIO_Init+0x2bc>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d101      	bne.n	80015a8 <HAL_GPIO_Init+0x1d8>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e004      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015a8:	2303      	movs	r3, #3
 80015aa:	e002      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_GPIO_Init+0x1e2>
 80015b0:	2300      	movs	r3, #0
 80015b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015b4:	f002 0203 	and.w	r2, r2, #3
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	4093      	lsls	r3, r2
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015c2:	492f      	ldr	r1, [pc, #188]	@ (8001680 <HAL_GPIO_Init+0x2b0>)
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	089b      	lsrs	r3, r3, #2
 80015c8:	3302      	adds	r3, #2
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	492b      	ldr	r1, [pc, #172]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ea:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4927      	ldr	r1, [pc, #156]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d006      	beq.n	8001612 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4921      	ldr	r1, [pc, #132]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	60cb      	str	r3, [r1, #12]
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	43db      	mvns	r3, r3
 800161a:	491d      	ldr	r1, [pc, #116]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800161c:	4013      	ands	r3, r2
 800161e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d006      	beq.n	800163a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	4917      	ldr	r1, [pc, #92]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	604b      	str	r3, [r1, #4]
 8001638:	e006      	b.n	8001648 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	43db      	mvns	r3, r3
 8001642:	4913      	ldr	r1, [pc, #76]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001644:	4013      	ands	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01f      	beq.n	8001694 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	490d      	ldr	r1, [pc, #52]	@ (8001690 <HAL_GPIO_Init+0x2c0>)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
 8001660:	e01f      	b.n	80016a2 <HAL_GPIO_Init+0x2d2>
 8001662:	bf00      	nop
 8001664:	10320000 	.word	0x10320000
 8001668:	10310000 	.word	0x10310000
 800166c:	10220000 	.word	0x10220000
 8001670:	10210000 	.word	0x10210000
 8001674:	10120000 	.word	0x10120000
 8001678:	10110000 	.word	0x10110000
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	40010800 	.word	0x40010800
 8001688:	40010c00 	.word	0x40010c00
 800168c:	40011000 	.word	0x40011000
 8001690:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <HAL_GPIO_Init+0x2f4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	43db      	mvns	r3, r3
 800169c:	4909      	ldr	r1, [pc, #36]	@ (80016c4 <HAL_GPIO_Init+0x2f4>)
 800169e:	4013      	ands	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	3301      	adds	r3, #1
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	fa22 f303 	lsr.w	r3, r2, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f47f ae96 	bne.w	80013e4 <HAL_GPIO_Init+0x14>
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	372c      	adds	r7, #44	@ 0x2c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40010400 	.word	0x40010400

080016c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	807b      	strh	r3, [r7, #2]
 80016d4:	4613      	mov	r3, r2
 80016d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d8:	787b      	ldrb	r3, [r7, #1]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016e6:	887b      	ldrh	r3, [r7, #2]
 80016e8:	041a      	lsls	r2, r3, #16
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	611a      	str	r2, [r3, #16]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e272      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8087 	beq.w	8001826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001718:	4b92      	ldr	r3, [pc, #584]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b04      	cmp	r3, #4
 8001722:	d00c      	beq.n	800173e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001724:	4b8f      	ldr	r3, [pc, #572]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d112      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
 8001730:	4b8c      	ldr	r3, [pc, #560]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800173c:	d10b      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	4b89      	ldr	r3, [pc, #548]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d06c      	beq.n	8001824 <HAL_RCC_OscConfig+0x12c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d168      	bne.n	8001824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e24c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x76>
 8001760:	4b80      	ldr	r3, [pc, #512]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a7f      	ldr	r2, [pc, #508]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e02e      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x98>
 8001776:	4b7b      	ldr	r3, [pc, #492]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7a      	ldr	r2, [pc, #488]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b78      	ldr	r3, [pc, #480]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a77      	ldr	r2, [pc, #476]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0xbc>
 800179a:	4b72      	ldr	r3, [pc, #456]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a71      	ldr	r2, [pc, #452]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 80017b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a67      	ldr	r2, [pc, #412]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7fe ffe2 	bl	800079c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7fe ffde 	bl	800079c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	@ 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e200      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xe4>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7fe ffce 	bl	800079c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7fe ffca 	bl	800079c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	@ 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1ec      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b53      	ldr	r3, [pc, #332]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x10c>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001832:	4b4c      	ldr	r3, [pc, #304]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183e:	4b49      	ldr	r3, [pc, #292]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
 800184a:	4b46      	ldr	r3, [pc, #280]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b43      	ldr	r3, [pc, #268]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c0      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3d      	ldr	r3, [pc, #244]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4939      	ldr	r1, [pc, #228]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <HAL_RCC_OscConfig+0x270>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7fe ff83 	bl	800079c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7fe ff7f 	bl	800079c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4927      	ldr	r1, [pc, #156]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b26      	ldr	r3, [pc, #152]	@ (8001968 <HAL_RCC_OscConfig+0x270>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7fe ff62 	bl	800079c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7fe ff5e 	bl	800079c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e180      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03a      	beq.n	800197c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_RCC_OscConfig+0x274>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7fe ff42 	bl	800079c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7fe ff3e 	bl	800079c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e160      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f000 face 	bl	8001edc <RCC_Delay>
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_RCC_OscConfig+0x274>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7fe ff28 	bl	800079c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7fe ff24 	bl	800079c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d908      	bls.n	8001970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e146      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	42420000 	.word	0x42420000
 800196c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b92      	ldr	r3, [pc, #584]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e9      	bne.n	8001950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a6 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8b      	ldr	r3, [pc, #556]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b88      	ldr	r3, [pc, #544]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a87      	ldr	r2, [pc, #540]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b85      	ldr	r3, [pc, #532]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b82      	ldr	r3, [pc, #520]	@ (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7fe fee5 	bl	800079c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7fe fee1 	bl	800079c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	@ 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e103      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b75      	ldr	r3, [pc, #468]	@ (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x312>
 80019fc:	4b6f      	ldr	r3, [pc, #444]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a6e      	ldr	r2, [pc, #440]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x334>
 8001a12:	4b6a      	ldr	r3, [pc, #424]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a69      	ldr	r2, [pc, #420]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b67      	ldr	r3, [pc, #412]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a66      	ldr	r2, [pc, #408]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x356>
 8001a34:	4b61      	ldr	r3, [pc, #388]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a60      	ldr	r2, [pc, #384]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4b5e      	ldr	r3, [pc, #376]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a5a      	ldr	r2, [pc, #360]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b58      	ldr	r3, [pc, #352]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a57      	ldr	r2, [pc, #348]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7fe fe95 	bl	800079c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe fe91 	bl	800079c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0b1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x37e>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7fe fe7f 	bl	800079c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7fe fe7b 	bl	800079c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e09b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b40      	ldr	r3, [pc, #256]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b3c      	ldr	r3, [pc, #240]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a3b      	ldr	r2, [pc, #236]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d061      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d146      	bne.n	8001b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe fe4f 	bl	800079c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe fe4b 	bl	800079c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e06d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	4b29      	ldr	r3, [pc, #164]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4921      	ldr	r1, [pc, #132]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a19      	ldr	r1, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	491b      	ldr	r1, [pc, #108]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fe1f 	bl	800079c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe fe1b 	bl	800079c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46a>
 8001b80:	e035      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fe08 	bl	800079c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe fe04 	bl	800079c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e026      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x498>
 8001bae:	e01e      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e019      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_RCC_OscConfig+0x500>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fd56 	bl	800079c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fd52 	bl	800079c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	@ (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fcb4 	bl	8000718 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003864 	.word	0x08003864
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x36>
 8001dfe:	e027      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e02:	613b      	str	r3, [r7, #16]
      break;
 8001e04:	e027      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0c5b      	lsrs	r3, r3, #17
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e004      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e52:	613b      	str	r3, [r7, #16]
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	693b      	ldr	r3, [r7, #16]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	0800387c 	.word	0x0800387c
 8001e70:	0800388c 	.word	0x0800388c
 8001e74:	003d0900 	.word	0x003d0900

08001e78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	@ (8001e88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000000 	.word	0x20000000

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e90:	f7ff fff2 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	@ (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	08003874 	.word	0x08003874

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb8:	f7ff ffde 	bl	8001e78 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	0adb      	lsrs	r3, r3, #11
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	08003874 	.word	0x08003874

08001edc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <RCC_Delay+0x34>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <RCC_Delay+0x38>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a5b      	lsrs	r3, r3, #9
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ef8:	bf00      	nop
  }
  while (Delay --);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1e5a      	subs	r2, r3, #1
 8001efe:	60fa      	str	r2, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f9      	bne.n	8001ef8 <RCC_Delay+0x1c>
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	20000000 	.word	0x20000000
 8001f14:	10624dd3 	.word	0x10624dd3

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d07d      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001f34:	2300      	movs	r3, #0
 8001f36:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b4f      	ldr	r3, [pc, #316]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b4c      	ldr	r3, [pc, #304]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	4a4b      	ldr	r2, [pc, #300]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	61d3      	str	r3, [r2, #28]
 8001f50:	4b49      	ldr	r3, [pc, #292]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	4b46      	ldr	r3, [pc, #280]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d118      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6c:	4b43      	ldr	r3, [pc, #268]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a42      	ldr	r2, [pc, #264]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f78:	f7fe fc10 	bl	800079c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7e:	e008      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f80:	f7fe fc0c 	bl	800079c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e06d      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b3a      	ldr	r3, [pc, #232]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02e      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d027      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001fd2:	4a29      	ldr	r2, [pc, #164]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d014      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fbdb 	bl	800079c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe fbd7 	bl	800079c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e036      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ee      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	4917      	ldr	r1, [pc, #92]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	4313      	orrs	r3, r2
 800201c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d105      	bne.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800202e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	490b      	ldr	r1, [pc, #44]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	2b00      	cmp	r3, #0
 8002058:	d008      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800205a:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	4904      	ldr	r1, [pc, #16]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420440 	.word	0x42420440

08002084 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	2300      	movs	r3, #0
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	f200 808a 	bhi.w	80021c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d045      	beq.n	8002140 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d075      	beq.n	80021a6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80020ba:	e082      	b.n	80021c2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80020bc:	4b46      	ldr	r3, [pc, #280]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80020c2:	4b45      	ldr	r3, [pc, #276]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d07b      	beq.n	80021c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	4a41      	ldr	r2, [pc, #260]	@ (80021dc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d015      	beq.n	8002112 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e6:	4b3c      	ldr	r3, [pc, #240]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0c5b      	lsrs	r3, r3, #17
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	4a3b      	ldr	r2, [pc, #236]	@ (80021e0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00d      	beq.n	800211c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002100:	4a38      	ldr	r2, [pc, #224]	@ (80021e4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fbb2 f2f3 	udiv	r2, r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e004      	b.n	800211c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4a34      	ldr	r2, [pc, #208]	@ (80021e8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002128:	d102      	bne.n	8002130 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	61bb      	str	r3, [r7, #24]
      break;
 800212e:	e04a      	b.n	80021c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4a2d      	ldr	r2, [pc, #180]	@ (80021ec <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
      break;
 800213e:	e042      	b.n	80021c6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002140:	4b25      	ldr	r3, [pc, #148]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800214c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002150:	d108      	bne.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800215c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e01f      	b.n	80021a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216e:	d109      	bne.n	8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002170:	4b19      	ldr	r3, [pc, #100]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800217c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002180:	61bb      	str	r3, [r7, #24]
 8002182:	e00f      	b.n	80021a4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800218a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800218e:	d11c      	bne.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002190:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800219c:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80021a0:	61bb      	str	r3, [r7, #24]
      break;
 80021a2:	e012      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80021a4:	e011      	b.n	80021ca <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80021a6:	f7ff fe85 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	0b9b      	lsrs	r3, r3, #14
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	3301      	adds	r3, #1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	61bb      	str	r3, [r7, #24]
      break;
 80021c0:	e004      	b.n	80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021c2:	bf00      	nop
 80021c4:	e002      	b.n	80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021c6:	bf00      	nop
 80021c8:	e000      	b.n	80021cc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80021ca:	bf00      	nop
    }
  }
  return (frequency);
 80021cc:	69bb      	ldr	r3, [r7, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3720      	adds	r7, #32
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	08003890 	.word	0x08003890
 80021e0:	080038a0 	.word	0x080038a0
 80021e4:	007a1200 	.word	0x007a1200
 80021e8:	003d0900 	.word	0x003d0900
 80021ec:	aaaaaaab 	.word	0xaaaaaaab

080021f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e042      	b.n	8002288 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe f97e 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2224      	movs	r2, #36	@ 0x24
 8002220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 fdb7 	bl	8002da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695a      	ldr	r2, [r3, #20]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d175      	bne.n	800239c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_UART_Transmit+0x2c>
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e06e      	b.n	800239e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2221      	movs	r2, #33	@ 0x21
 80022ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ce:	f7fe fa65 	bl	800079c <HAL_GetTick>
 80022d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	88fa      	ldrh	r2, [r7, #6]
 80022de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e8:	d108      	bne.n	80022fc <HAL_UART_Transmit+0x6c>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d104      	bne.n	80022fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	e003      	b.n	8002304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002304:	e02e      	b.n	8002364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2180      	movs	r1, #128	@ 0x80
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 fb1c 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e03a      	b.n	800239e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10b      	bne.n	8002346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800233c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	3302      	adds	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	e007      	b.n	8002356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	3301      	adds	r3, #1
 8002354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1cb      	bne.n	8002306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2200      	movs	r2, #0
 8002376:	2140      	movs	r1, #64	@ 0x40
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fae8 	bl	800294e <UART_WaitOnFlagUntilTimeout>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e006      	b.n	800239e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	4613      	mov	r3, r2
 80023b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d112      	bne.n	80023e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Receive_IT+0x26>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e00b      	b.n	80023e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	461a      	mov	r2, r3
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fb0f 	bl	8002a00 <UART_Start_Receive_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	e000      	b.n	80023e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80023e6:	2302      	movs	r3, #2
  }
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0ba      	sub	sp, #232	@ 0xe8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800241c:	2300      	movs	r3, #0
 800241e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800242e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800243a:	f003 0320 	and.w	r3, r3, #32
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HAL_UART_IRQHandler+0x66>
 8002442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fbec 	bl	8002c2c <UART_Receive_IT>
      return;
 8002454:	e25b      	b.n	800290e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 80de 	beq.w	800261c <HAL_UART_IRQHandler+0x22c>
 8002460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d106      	bne.n	800247a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800246c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002470:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80d1 	beq.w	800261c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800247a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00b      	beq.n	800249e <HAL_UART_IRQHandler+0xae>
 8002486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	f043 0201 	orr.w	r2, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800249e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_UART_IRQHandler+0xd2>
 80024aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00b      	beq.n	80024e6 <HAL_UART_IRQHandler+0xf6>
 80024ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f043 0204 	orr.w	r2, r3, #4
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80024e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d011      	beq.n	8002516 <HAL_UART_IRQHandler+0x126>
 80024f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d105      	bne.n	800250a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80024fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	f043 0208 	orr.w	r2, r3, #8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 81f2 	beq.w	8002904 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_UART_IRQHandler+0x14e>
 800252c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fb77 	bl	8002c2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <HAL_UART_IRQHandler+0x17a>
 8002562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d04f      	beq.n	800260a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa81 	bl	8002a72 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d041      	beq.n	8002602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3314      	adds	r3, #20
 8002584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800259c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80025aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80025ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80025b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80025ba:	e841 2300 	strex	r3, r2, [r1]
 80025be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80025c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1d9      	bne.n	800257e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d013      	beq.n	80025fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025d6:	4a7e      	ldr	r2, [pc, #504]	@ (80027d0 <HAL_UART_IRQHandler+0x3e0>)
 80025d8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fe7e 	bl	80012e0 <HAL_DMA_Abort_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025f4:	4610      	mov	r0, r2
 80025f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025f8:	e00e      	b.n	8002618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f993 	bl	8002926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002600:	e00a      	b.n	8002618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f98f 	bl	8002926 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002608:	e006      	b.n	8002618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f98b 	bl	8002926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002616:	e175      	b.n	8002904 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	bf00      	nop
    return;
 800261a:	e173      	b.n	8002904 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 814f 	bne.w	80028c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8148 	beq.w	80028c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8141 	beq.w	80028c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80b6 	beq.w	80027d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8145 	beq.w	8002908 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002686:	429a      	cmp	r2, r3
 8002688:	f080 813e 	bcs.w	8002908 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002692:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b20      	cmp	r3, #32
 800269c:	f000 8088 	beq.w	80027b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026ae:	e853 3f00 	ldrex	r3, [r3]
 80026b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80026b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80026ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80026cc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80026d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80026dc:	e841 2300 	strex	r3, r2, [r1]
 80026e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80026e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1d9      	bne.n	80026a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3314      	adds	r3, #20
 80026f2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026f6:	e853 3f00 	ldrex	r3, [r3]
 80026fa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80026fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002710:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002714:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002718:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800271c:	e841 2300 	strex	r3, r2, [r1]
 8002720:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e1      	bne.n	80026ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3314      	adds	r3, #20
 800272e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002730:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002732:	e853 3f00 	ldrex	r3, [r3]
 8002736:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800273a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800273e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3314      	adds	r3, #20
 8002748:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800274c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800274e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002750:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002752:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002754:	e841 2300 	strex	r3, r2, [r1]
 8002758:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800275a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e3      	bne.n	8002728 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	330c      	adds	r3, #12
 8002774:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002776:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800277e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002780:	f023 0310 	bic.w	r3, r3, #16
 8002784:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	330c      	adds	r3, #12
 800278e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002792:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002794:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002798:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80027a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e3      	bne.n	800276e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fd5d 	bl	800126a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027be:	b29b      	uxth	r3, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f8b6 	bl	8002938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027cc:	e09c      	b.n	8002908 <HAL_UART_IRQHandler+0x518>
 80027ce:	bf00      	nop
 80027d0:	08002b37 	.word	0x08002b37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 808e 	beq.w	800290c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80027f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 8089 	beq.w	800290c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800280a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	330c      	adds	r3, #12
 800281a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800281e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002820:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800282c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e3      	bne.n	80027fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3314      	adds	r3, #20
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	e853 3f00 	ldrex	r3, [r3]
 8002840:	623b      	str	r3, [r7, #32]
   return(result);
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3314      	adds	r3, #20
 8002852:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002856:	633a      	str	r2, [r7, #48]	@ 0x30
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800285c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800285e:	e841 2300 	strex	r3, r2, [r1]
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1e3      	bne.n	8002832 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	330c      	adds	r3, #12
 800287e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	e853 3f00 	ldrex	r3, [r3]
 8002886:	60fb      	str	r3, [r7, #12]
   return(result);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f023 0310 	bic.w	r3, r3, #16
 800288e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	330c      	adds	r3, #12
 8002898:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800289c:	61fa      	str	r2, [r7, #28]
 800289e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a0:	69b9      	ldr	r1, [r7, #24]
 80028a2:	69fa      	ldr	r2, [r7, #28]
 80028a4:	e841 2300 	strex	r3, r2, [r1]
 80028a8:	617b      	str	r3, [r7, #20]
   return(result);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e3      	bne.n	8002878 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f83b 	bl	8002938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028c2:	e023      	b.n	800290c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_UART_IRQHandler+0x4f4>
 80028d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f93e 	bl	8002b5e <UART_Transmit_IT>
    return;
 80028e2:	e014      	b.n	800290e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <HAL_UART_IRQHandler+0x51e>
 80028f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f97d 	bl	8002bfc <UART_EndTransmit_IT>
    return;
 8002902:	e004      	b.n	800290e <HAL_UART_IRQHandler+0x51e>
    return;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <HAL_UART_IRQHandler+0x51e>
      return;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <HAL_UART_IRQHandler+0x51e>
      return;
 800290c:	bf00      	nop
  }
}
 800290e:	37e8      	adds	r7, #232	@ 0xe8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b086      	sub	sp, #24
 8002952:	af00      	add	r7, sp, #0
 8002954:	60f8      	str	r0, [r7, #12]
 8002956:	60b9      	str	r1, [r7, #8]
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4613      	mov	r3, r2
 800295c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295e:	e03b      	b.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002966:	d037      	beq.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002968:	f7fd ff18 	bl	800079c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	6a3a      	ldr	r2, [r7, #32]
 8002974:	429a      	cmp	r2, r3
 8002976:	d302      	bcc.n	800297e <UART_WaitOnFlagUntilTimeout+0x30>
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e03a      	b.n	80029f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d023      	beq.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b80      	cmp	r3, #128	@ 0x80
 8002994:	d020      	beq.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d01d      	beq.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d116      	bne.n	80029d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	617b      	str	r3, [r7, #20]
 80029be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f856 	bl	8002a72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2208      	movs	r2, #8
 80029ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e00f      	b.n	80029f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4013      	ands	r3, r2
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d0b4      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	88fa      	ldrh	r2, [r7, #6]
 8002a1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2222      	movs	r2, #34	@ 0x22
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d007      	beq.n	8002a46 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a44:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0220 	orr.w	r2, r2, #32
 8002a64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b095      	sub	sp, #84	@ 0x54
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	330c      	adds	r3, #12
 8002a80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a84:	e853 3f00 	ldrex	r3, [r3]
 8002a88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002aa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002aa2:	e841 2300 	strex	r3, r2, [r1]
 8002aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3314      	adds	r3, #20
 8002acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d119      	bne.n	8002b1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f023 0310 	bic.w	r3, r3, #16
 8002b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b0a:	61ba      	str	r2, [r7, #24]
 8002b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	6979      	ldr	r1, [r7, #20]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	613b      	str	r3, [r7, #16]
   return(result);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002b2c:	bf00      	nop
 8002b2e:	3754      	adds	r7, #84	@ 0x54
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b084      	sub	sp, #16
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f7ff fee8 	bl	8002926 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b21      	cmp	r3, #33	@ 0x21
 8002b70:	d13e      	bne.n	8002bf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b7a:	d114      	bne.n	8002ba6 <UART_Transmit_IT+0x48>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d110      	bne.n	8002ba6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	621a      	str	r2, [r3, #32]
 8002ba4:	e008      	b.n	8002bb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6211      	str	r1, [r2, #32]
 8002bb0:	781a      	ldrb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10f      	bne.n	8002bec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bf0:	2302      	movs	r3, #2
  }
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff fe79 	bl	8002914 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b08c      	sub	sp, #48	@ 0x30
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b22      	cmp	r3, #34	@ 0x22
 8002c3e:	f040 80ae 	bne.w	8002d9e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4a:	d117      	bne.n	8002c7c <UART_Receive_IT+0x50>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d113      	bne.n	8002c7c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	1c9a      	adds	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c7a:	e026      	b.n	8002cca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c8e:	d007      	beq.n	8002ca0 <UART_Receive_IT+0x74>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <UART_Receive_IT+0x82>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d106      	bne.n	8002cae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	701a      	strb	r2, [r3, #0]
 8002cac:	e008      	b.n	8002cc0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d15d      	bne.n	8002d9a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0220 	bic.w	r2, r2, #32
 8002cec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cfc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 0201 	bic.w	r2, r2, #1
 8002d0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2220      	movs	r2, #32
 8002d12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d135      	bne.n	8002d90 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d4a:	623a      	str	r2, [r7, #32]
 8002d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	6a3a      	ldr	r2, [r7, #32]
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d10a      	bne.n	8002d82 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fdd5 	bl	8002938 <HAL_UARTEx_RxEventCallback>
 8002d8e:	e002      	b.n	8002d96 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd f9e3 	bl	800015c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	e002      	b.n	8002da0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
  }
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3730      	adds	r7, #48	@ 0x30
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002de2:	f023 030c 	bic.w	r3, r3, #12
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ebc <UART_SetConfig+0x114>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e10:	f7ff f850 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	e002      	b.n	8002e1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002e18:	f7ff f838 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009a      	lsls	r2, r3, #2
 8002e28:	441a      	add	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	4a22      	ldr	r2, [pc, #136]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	0119      	lsls	r1, r3, #4
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	009a      	lsls	r2, r3, #2
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e56:	fba3 0302 	umull	r0, r3, r3, r2
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	2064      	movs	r0, #100	@ 0x64
 8002e5e:	fb00 f303 	mul.w	r3, r0, r3
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	3332      	adds	r3, #50	@ 0x32
 8002e68:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e74:	4419      	add	r1, r3
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009a      	lsls	r2, r3, #2
 8002e80:	441a      	add	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002e8e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2064      	movs	r0, #100	@ 0x64
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	011b      	lsls	r3, r3, #4
 8002e9e:	3332      	adds	r3, #50	@ 0x32
 8002ea0:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <UART_SetConfig+0x118>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	f003 020f 	and.w	r2, r3, #15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	440a      	add	r2, r1
 8002eb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <siprintf>:
 8002ec4:	b40e      	push	{r1, r2, r3}
 8002ec6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002eca:	b500      	push	{lr}
 8002ecc:	b09c      	sub	sp, #112	@ 0x70
 8002ece:	ab1d      	add	r3, sp, #116	@ 0x74
 8002ed0:	9002      	str	r0, [sp, #8]
 8002ed2:	9006      	str	r0, [sp, #24]
 8002ed4:	9107      	str	r1, [sp, #28]
 8002ed6:	9104      	str	r1, [sp, #16]
 8002ed8:	4808      	ldr	r0, [pc, #32]	@ (8002efc <siprintf+0x38>)
 8002eda:	4909      	ldr	r1, [pc, #36]	@ (8002f00 <siprintf+0x3c>)
 8002edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ee0:	9105      	str	r1, [sp, #20]
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	a902      	add	r1, sp, #8
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	f000 f992 	bl	8003210 <_svfiprintf_r>
 8002eec:	2200      	movs	r2, #0
 8002eee:	9b02      	ldr	r3, [sp, #8]
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	b01c      	add	sp, #112	@ 0x70
 8002ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ef8:	b003      	add	sp, #12
 8002efa:	4770      	bx	lr
 8002efc:	2000000c 	.word	0x2000000c
 8002f00:	ffff0208 	.word	0xffff0208

08002f04 <memset>:
 8002f04:	4603      	mov	r3, r0
 8002f06:	4402      	add	r2, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memset+0xa>
 8002f0c:	4770      	bx	lr
 8002f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f12:	e7f9      	b.n	8002f08 <memset+0x4>

08002f14 <__errno>:
 8002f14:	4b01      	ldr	r3, [pc, #4]	@ (8002f1c <__errno+0x8>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <__libc_init_array>:
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	2600      	movs	r6, #0
 8002f24:	4d0c      	ldr	r5, [pc, #48]	@ (8002f58 <__libc_init_array+0x38>)
 8002f26:	4c0d      	ldr	r4, [pc, #52]	@ (8002f5c <__libc_init_array+0x3c>)
 8002f28:	1b64      	subs	r4, r4, r5
 8002f2a:	10a4      	asrs	r4, r4, #2
 8002f2c:	42a6      	cmp	r6, r4
 8002f2e:	d109      	bne.n	8002f44 <__libc_init_array+0x24>
 8002f30:	f000 fc78 	bl	8003824 <_init>
 8002f34:	2600      	movs	r6, #0
 8002f36:	4d0a      	ldr	r5, [pc, #40]	@ (8002f60 <__libc_init_array+0x40>)
 8002f38:	4c0a      	ldr	r4, [pc, #40]	@ (8002f64 <__libc_init_array+0x44>)
 8002f3a:	1b64      	subs	r4, r4, r5
 8002f3c:	10a4      	asrs	r4, r4, #2
 8002f3e:	42a6      	cmp	r6, r4
 8002f40:	d105      	bne.n	8002f4e <__libc_init_array+0x2e>
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f48:	4798      	blx	r3
 8002f4a:	3601      	adds	r6, #1
 8002f4c:	e7ee      	b.n	8002f2c <__libc_init_array+0xc>
 8002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f52:	4798      	blx	r3
 8002f54:	3601      	adds	r6, #1
 8002f56:	e7f2      	b.n	8002f3e <__libc_init_array+0x1e>
 8002f58:	080038e0 	.word	0x080038e0
 8002f5c:	080038e0 	.word	0x080038e0
 8002f60:	080038e0 	.word	0x080038e0
 8002f64:	080038e4 	.word	0x080038e4

08002f68 <__retarget_lock_acquire_recursive>:
 8002f68:	4770      	bx	lr

08002f6a <__retarget_lock_release_recursive>:
 8002f6a:	4770      	bx	lr

08002f6c <_free_r>:
 8002f6c:	b538      	push	{r3, r4, r5, lr}
 8002f6e:	4605      	mov	r5, r0
 8002f70:	2900      	cmp	r1, #0
 8002f72:	d040      	beq.n	8002ff6 <_free_r+0x8a>
 8002f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f78:	1f0c      	subs	r4, r1, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bfb8      	it	lt
 8002f7e:	18e4      	addlt	r4, r4, r3
 8002f80:	f000 f8de 	bl	8003140 <__malloc_lock>
 8002f84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <_free_r+0x8c>)
 8002f86:	6813      	ldr	r3, [r2, #0]
 8002f88:	b933      	cbnz	r3, 8002f98 <_free_r+0x2c>
 8002f8a:	6063      	str	r3, [r4, #4]
 8002f8c:	6014      	str	r4, [r2, #0]
 8002f8e:	4628      	mov	r0, r5
 8002f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f94:	f000 b8da 	b.w	800314c <__malloc_unlock>
 8002f98:	42a3      	cmp	r3, r4
 8002f9a:	d908      	bls.n	8002fae <_free_r+0x42>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	1821      	adds	r1, r4, r0
 8002fa0:	428b      	cmp	r3, r1
 8002fa2:	bf01      	itttt	eq
 8002fa4:	6819      	ldreq	r1, [r3, #0]
 8002fa6:	685b      	ldreq	r3, [r3, #4]
 8002fa8:	1809      	addeq	r1, r1, r0
 8002faa:	6021      	streq	r1, [r4, #0]
 8002fac:	e7ed      	b.n	8002f8a <_free_r+0x1e>
 8002fae:	461a      	mov	r2, r3
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b10b      	cbz	r3, 8002fb8 <_free_r+0x4c>
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	d9fa      	bls.n	8002fae <_free_r+0x42>
 8002fb8:	6811      	ldr	r1, [r2, #0]
 8002fba:	1850      	adds	r0, r2, r1
 8002fbc:	42a0      	cmp	r0, r4
 8002fbe:	d10b      	bne.n	8002fd8 <_free_r+0x6c>
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	4401      	add	r1, r0
 8002fc4:	1850      	adds	r0, r2, r1
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	6011      	str	r1, [r2, #0]
 8002fca:	d1e0      	bne.n	8002f8e <_free_r+0x22>
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4408      	add	r0, r1
 8002fd2:	6010      	str	r0, [r2, #0]
 8002fd4:	6053      	str	r3, [r2, #4]
 8002fd6:	e7da      	b.n	8002f8e <_free_r+0x22>
 8002fd8:	d902      	bls.n	8002fe0 <_free_r+0x74>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	602b      	str	r3, [r5, #0]
 8002fde:	e7d6      	b.n	8002f8e <_free_r+0x22>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	1821      	adds	r1, r4, r0
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	bf01      	itttt	eq
 8002fe8:	6819      	ldreq	r1, [r3, #0]
 8002fea:	685b      	ldreq	r3, [r3, #4]
 8002fec:	1809      	addeq	r1, r1, r0
 8002fee:	6021      	streq	r1, [r4, #0]
 8002ff0:	6063      	str	r3, [r4, #4]
 8002ff2:	6054      	str	r4, [r2, #4]
 8002ff4:	e7cb      	b.n	8002f8e <_free_r+0x22>
 8002ff6:	bd38      	pop	{r3, r4, r5, pc}
 8002ff8:	20000298 	.word	0x20000298

08002ffc <sbrk_aligned>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800303c <sbrk_aligned+0x40>)
 8003000:	460c      	mov	r4, r1
 8003002:	6831      	ldr	r1, [r6, #0]
 8003004:	4605      	mov	r5, r0
 8003006:	b911      	cbnz	r1, 800300e <sbrk_aligned+0x12>
 8003008:	f000 fbaa 	bl	8003760 <_sbrk_r>
 800300c:	6030      	str	r0, [r6, #0]
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f000 fba5 	bl	8003760 <_sbrk_r>
 8003016:	1c43      	adds	r3, r0, #1
 8003018:	d103      	bne.n	8003022 <sbrk_aligned+0x26>
 800301a:	f04f 34ff 	mov.w	r4, #4294967295
 800301e:	4620      	mov	r0, r4
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	1cc4      	adds	r4, r0, #3
 8003024:	f024 0403 	bic.w	r4, r4, #3
 8003028:	42a0      	cmp	r0, r4
 800302a:	d0f8      	beq.n	800301e <sbrk_aligned+0x22>
 800302c:	1a21      	subs	r1, r4, r0
 800302e:	4628      	mov	r0, r5
 8003030:	f000 fb96 	bl	8003760 <_sbrk_r>
 8003034:	3001      	adds	r0, #1
 8003036:	d1f2      	bne.n	800301e <sbrk_aligned+0x22>
 8003038:	e7ef      	b.n	800301a <sbrk_aligned+0x1e>
 800303a:	bf00      	nop
 800303c:	20000294 	.word	0x20000294

08003040 <_malloc_r>:
 8003040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003044:	1ccd      	adds	r5, r1, #3
 8003046:	f025 0503 	bic.w	r5, r5, #3
 800304a:	3508      	adds	r5, #8
 800304c:	2d0c      	cmp	r5, #12
 800304e:	bf38      	it	cc
 8003050:	250c      	movcc	r5, #12
 8003052:	2d00      	cmp	r5, #0
 8003054:	4606      	mov	r6, r0
 8003056:	db01      	blt.n	800305c <_malloc_r+0x1c>
 8003058:	42a9      	cmp	r1, r5
 800305a:	d904      	bls.n	8003066 <_malloc_r+0x26>
 800305c:	230c      	movs	r3, #12
 800305e:	6033      	str	r3, [r6, #0]
 8003060:	2000      	movs	r0, #0
 8003062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800313c <_malloc_r+0xfc>
 800306a:	f000 f869 	bl	8003140 <__malloc_lock>
 800306e:	f8d8 3000 	ldr.w	r3, [r8]
 8003072:	461c      	mov	r4, r3
 8003074:	bb44      	cbnz	r4, 80030c8 <_malloc_r+0x88>
 8003076:	4629      	mov	r1, r5
 8003078:	4630      	mov	r0, r6
 800307a:	f7ff ffbf 	bl	8002ffc <sbrk_aligned>
 800307e:	1c43      	adds	r3, r0, #1
 8003080:	4604      	mov	r4, r0
 8003082:	d158      	bne.n	8003136 <_malloc_r+0xf6>
 8003084:	f8d8 4000 	ldr.w	r4, [r8]
 8003088:	4627      	mov	r7, r4
 800308a:	2f00      	cmp	r7, #0
 800308c:	d143      	bne.n	8003116 <_malloc_r+0xd6>
 800308e:	2c00      	cmp	r4, #0
 8003090:	d04b      	beq.n	800312a <_malloc_r+0xea>
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	4639      	mov	r1, r7
 8003096:	4630      	mov	r0, r6
 8003098:	eb04 0903 	add.w	r9, r4, r3
 800309c:	f000 fb60 	bl	8003760 <_sbrk_r>
 80030a0:	4581      	cmp	r9, r0
 80030a2:	d142      	bne.n	800312a <_malloc_r+0xea>
 80030a4:	6821      	ldr	r1, [r4, #0]
 80030a6:	4630      	mov	r0, r6
 80030a8:	1a6d      	subs	r5, r5, r1
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7ff ffa6 	bl	8002ffc <sbrk_aligned>
 80030b0:	3001      	adds	r0, #1
 80030b2:	d03a      	beq.n	800312a <_malloc_r+0xea>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	442b      	add	r3, r5
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	f8d8 3000 	ldr.w	r3, [r8]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	bb62      	cbnz	r2, 800311c <_malloc_r+0xdc>
 80030c2:	f8c8 7000 	str.w	r7, [r8]
 80030c6:	e00f      	b.n	80030e8 <_malloc_r+0xa8>
 80030c8:	6822      	ldr	r2, [r4, #0]
 80030ca:	1b52      	subs	r2, r2, r5
 80030cc:	d420      	bmi.n	8003110 <_malloc_r+0xd0>
 80030ce:	2a0b      	cmp	r2, #11
 80030d0:	d917      	bls.n	8003102 <_malloc_r+0xc2>
 80030d2:	1961      	adds	r1, r4, r5
 80030d4:	42a3      	cmp	r3, r4
 80030d6:	6025      	str	r5, [r4, #0]
 80030d8:	bf18      	it	ne
 80030da:	6059      	strne	r1, [r3, #4]
 80030dc:	6863      	ldr	r3, [r4, #4]
 80030de:	bf08      	it	eq
 80030e0:	f8c8 1000 	streq.w	r1, [r8]
 80030e4:	5162      	str	r2, [r4, r5]
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	4630      	mov	r0, r6
 80030ea:	f000 f82f 	bl	800314c <__malloc_unlock>
 80030ee:	f104 000b 	add.w	r0, r4, #11
 80030f2:	1d23      	adds	r3, r4, #4
 80030f4:	f020 0007 	bic.w	r0, r0, #7
 80030f8:	1ac2      	subs	r2, r0, r3
 80030fa:	bf1c      	itt	ne
 80030fc:	1a1b      	subne	r3, r3, r0
 80030fe:	50a3      	strne	r3, [r4, r2]
 8003100:	e7af      	b.n	8003062 <_malloc_r+0x22>
 8003102:	6862      	ldr	r2, [r4, #4]
 8003104:	42a3      	cmp	r3, r4
 8003106:	bf0c      	ite	eq
 8003108:	f8c8 2000 	streq.w	r2, [r8]
 800310c:	605a      	strne	r2, [r3, #4]
 800310e:	e7eb      	b.n	80030e8 <_malloc_r+0xa8>
 8003110:	4623      	mov	r3, r4
 8003112:	6864      	ldr	r4, [r4, #4]
 8003114:	e7ae      	b.n	8003074 <_malloc_r+0x34>
 8003116:	463c      	mov	r4, r7
 8003118:	687f      	ldr	r7, [r7, #4]
 800311a:	e7b6      	b.n	800308a <_malloc_r+0x4a>
 800311c:	461a      	mov	r2, r3
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	42a3      	cmp	r3, r4
 8003122:	d1fb      	bne.n	800311c <_malloc_r+0xdc>
 8003124:	2300      	movs	r3, #0
 8003126:	6053      	str	r3, [r2, #4]
 8003128:	e7de      	b.n	80030e8 <_malloc_r+0xa8>
 800312a:	230c      	movs	r3, #12
 800312c:	4630      	mov	r0, r6
 800312e:	6033      	str	r3, [r6, #0]
 8003130:	f000 f80c 	bl	800314c <__malloc_unlock>
 8003134:	e794      	b.n	8003060 <_malloc_r+0x20>
 8003136:	6005      	str	r5, [r0, #0]
 8003138:	e7d6      	b.n	80030e8 <_malloc_r+0xa8>
 800313a:	bf00      	nop
 800313c:	20000298 	.word	0x20000298

08003140 <__malloc_lock>:
 8003140:	4801      	ldr	r0, [pc, #4]	@ (8003148 <__malloc_lock+0x8>)
 8003142:	f7ff bf11 	b.w	8002f68 <__retarget_lock_acquire_recursive>
 8003146:	bf00      	nop
 8003148:	20000290 	.word	0x20000290

0800314c <__malloc_unlock>:
 800314c:	4801      	ldr	r0, [pc, #4]	@ (8003154 <__malloc_unlock+0x8>)
 800314e:	f7ff bf0c 	b.w	8002f6a <__retarget_lock_release_recursive>
 8003152:	bf00      	nop
 8003154:	20000290 	.word	0x20000290

08003158 <__ssputs_r>:
 8003158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800315c:	461f      	mov	r7, r3
 800315e:	688e      	ldr	r6, [r1, #8]
 8003160:	4682      	mov	sl, r0
 8003162:	42be      	cmp	r6, r7
 8003164:	460c      	mov	r4, r1
 8003166:	4690      	mov	r8, r2
 8003168:	680b      	ldr	r3, [r1, #0]
 800316a:	d82d      	bhi.n	80031c8 <__ssputs_r+0x70>
 800316c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003170:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003174:	d026      	beq.n	80031c4 <__ssputs_r+0x6c>
 8003176:	6965      	ldr	r5, [r4, #20]
 8003178:	6909      	ldr	r1, [r1, #16]
 800317a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800317e:	eba3 0901 	sub.w	r9, r3, r1
 8003182:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003186:	1c7b      	adds	r3, r7, #1
 8003188:	444b      	add	r3, r9
 800318a:	106d      	asrs	r5, r5, #1
 800318c:	429d      	cmp	r5, r3
 800318e:	bf38      	it	cc
 8003190:	461d      	movcc	r5, r3
 8003192:	0553      	lsls	r3, r2, #21
 8003194:	d527      	bpl.n	80031e6 <__ssputs_r+0x8e>
 8003196:	4629      	mov	r1, r5
 8003198:	f7ff ff52 	bl	8003040 <_malloc_r>
 800319c:	4606      	mov	r6, r0
 800319e:	b360      	cbz	r0, 80031fa <__ssputs_r+0xa2>
 80031a0:	464a      	mov	r2, r9
 80031a2:	6921      	ldr	r1, [r4, #16]
 80031a4:	f000 fafa 	bl	800379c <memcpy>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80031ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	6126      	str	r6, [r4, #16]
 80031b6:	444e      	add	r6, r9
 80031b8:	6026      	str	r6, [r4, #0]
 80031ba:	463e      	mov	r6, r7
 80031bc:	6165      	str	r5, [r4, #20]
 80031be:	eba5 0509 	sub.w	r5, r5, r9
 80031c2:	60a5      	str	r5, [r4, #8]
 80031c4:	42be      	cmp	r6, r7
 80031c6:	d900      	bls.n	80031ca <__ssputs_r+0x72>
 80031c8:	463e      	mov	r6, r7
 80031ca:	4632      	mov	r2, r6
 80031cc:	4641      	mov	r1, r8
 80031ce:	6820      	ldr	r0, [r4, #0]
 80031d0:	f000 faac 	bl	800372c <memmove>
 80031d4:	2000      	movs	r0, #0
 80031d6:	68a3      	ldr	r3, [r4, #8]
 80031d8:	1b9b      	subs	r3, r3, r6
 80031da:	60a3      	str	r3, [r4, #8]
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	4433      	add	r3, r6
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031e6:	462a      	mov	r2, r5
 80031e8:	f000 fae6 	bl	80037b8 <_realloc_r>
 80031ec:	4606      	mov	r6, r0
 80031ee:	2800      	cmp	r0, #0
 80031f0:	d1e0      	bne.n	80031b4 <__ssputs_r+0x5c>
 80031f2:	4650      	mov	r0, sl
 80031f4:	6921      	ldr	r1, [r4, #16]
 80031f6:	f7ff feb9 	bl	8002f6c <_free_r>
 80031fa:	230c      	movs	r3, #12
 80031fc:	f8ca 3000 	str.w	r3, [sl]
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f04f 30ff 	mov.w	r0, #4294967295
 8003206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	e7e9      	b.n	80031e2 <__ssputs_r+0x8a>
	...

08003210 <_svfiprintf_r>:
 8003210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003214:	4698      	mov	r8, r3
 8003216:	898b      	ldrh	r3, [r1, #12]
 8003218:	4607      	mov	r7, r0
 800321a:	061b      	lsls	r3, r3, #24
 800321c:	460d      	mov	r5, r1
 800321e:	4614      	mov	r4, r2
 8003220:	b09d      	sub	sp, #116	@ 0x74
 8003222:	d510      	bpl.n	8003246 <_svfiprintf_r+0x36>
 8003224:	690b      	ldr	r3, [r1, #16]
 8003226:	b973      	cbnz	r3, 8003246 <_svfiprintf_r+0x36>
 8003228:	2140      	movs	r1, #64	@ 0x40
 800322a:	f7ff ff09 	bl	8003040 <_malloc_r>
 800322e:	6028      	str	r0, [r5, #0]
 8003230:	6128      	str	r0, [r5, #16]
 8003232:	b930      	cbnz	r0, 8003242 <_svfiprintf_r+0x32>
 8003234:	230c      	movs	r3, #12
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	b01d      	add	sp, #116	@ 0x74
 800323e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003242:	2340      	movs	r3, #64	@ 0x40
 8003244:	616b      	str	r3, [r5, #20]
 8003246:	2300      	movs	r3, #0
 8003248:	9309      	str	r3, [sp, #36]	@ 0x24
 800324a:	2320      	movs	r3, #32
 800324c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003250:	2330      	movs	r3, #48	@ 0x30
 8003252:	f04f 0901 	mov.w	r9, #1
 8003256:	f8cd 800c 	str.w	r8, [sp, #12]
 800325a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80033f4 <_svfiprintf_r+0x1e4>
 800325e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003262:	4623      	mov	r3, r4
 8003264:	469a      	mov	sl, r3
 8003266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800326a:	b10a      	cbz	r2, 8003270 <_svfiprintf_r+0x60>
 800326c:	2a25      	cmp	r2, #37	@ 0x25
 800326e:	d1f9      	bne.n	8003264 <_svfiprintf_r+0x54>
 8003270:	ebba 0b04 	subs.w	fp, sl, r4
 8003274:	d00b      	beq.n	800328e <_svfiprintf_r+0x7e>
 8003276:	465b      	mov	r3, fp
 8003278:	4622      	mov	r2, r4
 800327a:	4629      	mov	r1, r5
 800327c:	4638      	mov	r0, r7
 800327e:	f7ff ff6b 	bl	8003158 <__ssputs_r>
 8003282:	3001      	adds	r0, #1
 8003284:	f000 80a7 	beq.w	80033d6 <_svfiprintf_r+0x1c6>
 8003288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800328a:	445a      	add	r2, fp
 800328c:	9209      	str	r2, [sp, #36]	@ 0x24
 800328e:	f89a 3000 	ldrb.w	r3, [sl]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 809f 	beq.w	80033d6 <_svfiprintf_r+0x1c6>
 8003298:	2300      	movs	r3, #0
 800329a:	f04f 32ff 	mov.w	r2, #4294967295
 800329e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a2:	f10a 0a01 	add.w	sl, sl, #1
 80032a6:	9304      	str	r3, [sp, #16]
 80032a8:	9307      	str	r3, [sp, #28]
 80032aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80032b0:	4654      	mov	r4, sl
 80032b2:	2205      	movs	r2, #5
 80032b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032b8:	484e      	ldr	r0, [pc, #312]	@ (80033f4 <_svfiprintf_r+0x1e4>)
 80032ba:	f000 fa61 	bl	8003780 <memchr>
 80032be:	9a04      	ldr	r2, [sp, #16]
 80032c0:	b9d8      	cbnz	r0, 80032fa <_svfiprintf_r+0xea>
 80032c2:	06d0      	lsls	r0, r2, #27
 80032c4:	bf44      	itt	mi
 80032c6:	2320      	movmi	r3, #32
 80032c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032cc:	0711      	lsls	r1, r2, #28
 80032ce:	bf44      	itt	mi
 80032d0:	232b      	movmi	r3, #43	@ 0x2b
 80032d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032d6:	f89a 3000 	ldrb.w	r3, [sl]
 80032da:	2b2a      	cmp	r3, #42	@ 0x2a
 80032dc:	d015      	beq.n	800330a <_svfiprintf_r+0xfa>
 80032de:	4654      	mov	r4, sl
 80032e0:	2000      	movs	r0, #0
 80032e2:	f04f 0c0a 	mov.w	ip, #10
 80032e6:	9a07      	ldr	r2, [sp, #28]
 80032e8:	4621      	mov	r1, r4
 80032ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ee:	3b30      	subs	r3, #48	@ 0x30
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d94b      	bls.n	800338c <_svfiprintf_r+0x17c>
 80032f4:	b1b0      	cbz	r0, 8003324 <_svfiprintf_r+0x114>
 80032f6:	9207      	str	r2, [sp, #28]
 80032f8:	e014      	b.n	8003324 <_svfiprintf_r+0x114>
 80032fa:	eba0 0308 	sub.w	r3, r0, r8
 80032fe:	fa09 f303 	lsl.w	r3, r9, r3
 8003302:	4313      	orrs	r3, r2
 8003304:	46a2      	mov	sl, r4
 8003306:	9304      	str	r3, [sp, #16]
 8003308:	e7d2      	b.n	80032b0 <_svfiprintf_r+0xa0>
 800330a:	9b03      	ldr	r3, [sp, #12]
 800330c:	1d19      	adds	r1, r3, #4
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	9103      	str	r1, [sp, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfbb      	ittet	lt
 8003316:	425b      	neglt	r3, r3
 8003318:	f042 0202 	orrlt.w	r2, r2, #2
 800331c:	9307      	strge	r3, [sp, #28]
 800331e:	9307      	strlt	r3, [sp, #28]
 8003320:	bfb8      	it	lt
 8003322:	9204      	strlt	r2, [sp, #16]
 8003324:	7823      	ldrb	r3, [r4, #0]
 8003326:	2b2e      	cmp	r3, #46	@ 0x2e
 8003328:	d10a      	bne.n	8003340 <_svfiprintf_r+0x130>
 800332a:	7863      	ldrb	r3, [r4, #1]
 800332c:	2b2a      	cmp	r3, #42	@ 0x2a
 800332e:	d132      	bne.n	8003396 <_svfiprintf_r+0x186>
 8003330:	9b03      	ldr	r3, [sp, #12]
 8003332:	3402      	adds	r4, #2
 8003334:	1d1a      	adds	r2, r3, #4
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	9203      	str	r2, [sp, #12]
 800333a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800333e:	9305      	str	r3, [sp, #20]
 8003340:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80033f8 <_svfiprintf_r+0x1e8>
 8003344:	2203      	movs	r2, #3
 8003346:	4650      	mov	r0, sl
 8003348:	7821      	ldrb	r1, [r4, #0]
 800334a:	f000 fa19 	bl	8003780 <memchr>
 800334e:	b138      	cbz	r0, 8003360 <_svfiprintf_r+0x150>
 8003350:	2240      	movs	r2, #64	@ 0x40
 8003352:	9b04      	ldr	r3, [sp, #16]
 8003354:	eba0 000a 	sub.w	r0, r0, sl
 8003358:	4082      	lsls	r2, r0
 800335a:	4313      	orrs	r3, r2
 800335c:	3401      	adds	r4, #1
 800335e:	9304      	str	r3, [sp, #16]
 8003360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003364:	2206      	movs	r2, #6
 8003366:	4825      	ldr	r0, [pc, #148]	@ (80033fc <_svfiprintf_r+0x1ec>)
 8003368:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800336c:	f000 fa08 	bl	8003780 <memchr>
 8003370:	2800      	cmp	r0, #0
 8003372:	d036      	beq.n	80033e2 <_svfiprintf_r+0x1d2>
 8003374:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <_svfiprintf_r+0x1f0>)
 8003376:	bb1b      	cbnz	r3, 80033c0 <_svfiprintf_r+0x1b0>
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	3307      	adds	r3, #7
 800337c:	f023 0307 	bic.w	r3, r3, #7
 8003380:	3308      	adds	r3, #8
 8003382:	9303      	str	r3, [sp, #12]
 8003384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003386:	4433      	add	r3, r6
 8003388:	9309      	str	r3, [sp, #36]	@ 0x24
 800338a:	e76a      	b.n	8003262 <_svfiprintf_r+0x52>
 800338c:	460c      	mov	r4, r1
 800338e:	2001      	movs	r0, #1
 8003390:	fb0c 3202 	mla	r2, ip, r2, r3
 8003394:	e7a8      	b.n	80032e8 <_svfiprintf_r+0xd8>
 8003396:	2300      	movs	r3, #0
 8003398:	f04f 0c0a 	mov.w	ip, #10
 800339c:	4619      	mov	r1, r3
 800339e:	3401      	adds	r4, #1
 80033a0:	9305      	str	r3, [sp, #20]
 80033a2:	4620      	mov	r0, r4
 80033a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033a8:	3a30      	subs	r2, #48	@ 0x30
 80033aa:	2a09      	cmp	r2, #9
 80033ac:	d903      	bls.n	80033b6 <_svfiprintf_r+0x1a6>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0c6      	beq.n	8003340 <_svfiprintf_r+0x130>
 80033b2:	9105      	str	r1, [sp, #20]
 80033b4:	e7c4      	b.n	8003340 <_svfiprintf_r+0x130>
 80033b6:	4604      	mov	r4, r0
 80033b8:	2301      	movs	r3, #1
 80033ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80033be:	e7f0      	b.n	80033a2 <_svfiprintf_r+0x192>
 80033c0:	ab03      	add	r3, sp, #12
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	462a      	mov	r2, r5
 80033c6:	4638      	mov	r0, r7
 80033c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003404 <_svfiprintf_r+0x1f4>)
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	f3af 8000 	nop.w
 80033d0:	1c42      	adds	r2, r0, #1
 80033d2:	4606      	mov	r6, r0
 80033d4:	d1d6      	bne.n	8003384 <_svfiprintf_r+0x174>
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	065b      	lsls	r3, r3, #25
 80033da:	f53f af2d 	bmi.w	8003238 <_svfiprintf_r+0x28>
 80033de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033e0:	e72c      	b.n	800323c <_svfiprintf_r+0x2c>
 80033e2:	ab03      	add	r3, sp, #12
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	462a      	mov	r2, r5
 80033e8:	4638      	mov	r0, r7
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <_svfiprintf_r+0x1f4>)
 80033ec:	a904      	add	r1, sp, #16
 80033ee:	f000 f87d 	bl	80034ec <_printf_i>
 80033f2:	e7ed      	b.n	80033d0 <_svfiprintf_r+0x1c0>
 80033f4:	080038a2 	.word	0x080038a2
 80033f8:	080038a8 	.word	0x080038a8
 80033fc:	080038ac 	.word	0x080038ac
 8003400:	00000000 	.word	0x00000000
 8003404:	08003159 	.word	0x08003159

08003408 <_printf_common>:
 8003408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800340c:	4616      	mov	r6, r2
 800340e:	4698      	mov	r8, r3
 8003410:	688a      	ldr	r2, [r1, #8]
 8003412:	690b      	ldr	r3, [r1, #16]
 8003414:	4607      	mov	r7, r0
 8003416:	4293      	cmp	r3, r2
 8003418:	bfb8      	it	lt
 800341a:	4613      	movlt	r3, r2
 800341c:	6033      	str	r3, [r6, #0]
 800341e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003422:	460c      	mov	r4, r1
 8003424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003428:	b10a      	cbz	r2, 800342e <_printf_common+0x26>
 800342a:	3301      	adds	r3, #1
 800342c:	6033      	str	r3, [r6, #0]
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	0699      	lsls	r1, r3, #26
 8003432:	bf42      	ittt	mi
 8003434:	6833      	ldrmi	r3, [r6, #0]
 8003436:	3302      	addmi	r3, #2
 8003438:	6033      	strmi	r3, [r6, #0]
 800343a:	6825      	ldr	r5, [r4, #0]
 800343c:	f015 0506 	ands.w	r5, r5, #6
 8003440:	d106      	bne.n	8003450 <_printf_common+0x48>
 8003442:	f104 0a19 	add.w	sl, r4, #25
 8003446:	68e3      	ldr	r3, [r4, #12]
 8003448:	6832      	ldr	r2, [r6, #0]
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	42ab      	cmp	r3, r5
 800344e:	dc2b      	bgt.n	80034a8 <_printf_common+0xa0>
 8003450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	3b00      	subs	r3, #0
 8003458:	bf18      	it	ne
 800345a:	2301      	movne	r3, #1
 800345c:	0692      	lsls	r2, r2, #26
 800345e:	d430      	bmi.n	80034c2 <_printf_common+0xba>
 8003460:	4641      	mov	r1, r8
 8003462:	4638      	mov	r0, r7
 8003464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003468:	47c8      	blx	r9
 800346a:	3001      	adds	r0, #1
 800346c:	d023      	beq.n	80034b6 <_printf_common+0xae>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	6922      	ldr	r2, [r4, #16]
 8003472:	f003 0306 	and.w	r3, r3, #6
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf14      	ite	ne
 800347a:	2500      	movne	r5, #0
 800347c:	6833      	ldreq	r3, [r6, #0]
 800347e:	f04f 0600 	mov.w	r6, #0
 8003482:	bf08      	it	eq
 8003484:	68e5      	ldreq	r5, [r4, #12]
 8003486:	f104 041a 	add.w	r4, r4, #26
 800348a:	bf08      	it	eq
 800348c:	1aed      	subeq	r5, r5, r3
 800348e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003492:	bf08      	it	eq
 8003494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003498:	4293      	cmp	r3, r2
 800349a:	bfc4      	itt	gt
 800349c:	1a9b      	subgt	r3, r3, r2
 800349e:	18ed      	addgt	r5, r5, r3
 80034a0:	42b5      	cmp	r5, r6
 80034a2:	d11a      	bne.n	80034da <_printf_common+0xd2>
 80034a4:	2000      	movs	r0, #0
 80034a6:	e008      	b.n	80034ba <_printf_common+0xb2>
 80034a8:	2301      	movs	r3, #1
 80034aa:	4652      	mov	r2, sl
 80034ac:	4641      	mov	r1, r8
 80034ae:	4638      	mov	r0, r7
 80034b0:	47c8      	blx	r9
 80034b2:	3001      	adds	r0, #1
 80034b4:	d103      	bne.n	80034be <_printf_common+0xb6>
 80034b6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034be:	3501      	adds	r5, #1
 80034c0:	e7c1      	b.n	8003446 <_printf_common+0x3e>
 80034c2:	2030      	movs	r0, #48	@ 0x30
 80034c4:	18e1      	adds	r1, r4, r3
 80034c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034ca:	1c5a      	adds	r2, r3, #1
 80034cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034d0:	4422      	add	r2, r4
 80034d2:	3302      	adds	r3, #2
 80034d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034d8:	e7c2      	b.n	8003460 <_printf_common+0x58>
 80034da:	2301      	movs	r3, #1
 80034dc:	4622      	mov	r2, r4
 80034de:	4641      	mov	r1, r8
 80034e0:	4638      	mov	r0, r7
 80034e2:	47c8      	blx	r9
 80034e4:	3001      	adds	r0, #1
 80034e6:	d0e6      	beq.n	80034b6 <_printf_common+0xae>
 80034e8:	3601      	adds	r6, #1
 80034ea:	e7d9      	b.n	80034a0 <_printf_common+0x98>

080034ec <_printf_i>:
 80034ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034f0:	7e0f      	ldrb	r7, [r1, #24]
 80034f2:	4691      	mov	r9, r2
 80034f4:	2f78      	cmp	r7, #120	@ 0x78
 80034f6:	4680      	mov	r8, r0
 80034f8:	460c      	mov	r4, r1
 80034fa:	469a      	mov	sl, r3
 80034fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003502:	d807      	bhi.n	8003514 <_printf_i+0x28>
 8003504:	2f62      	cmp	r7, #98	@ 0x62
 8003506:	d80a      	bhi.n	800351e <_printf_i+0x32>
 8003508:	2f00      	cmp	r7, #0
 800350a:	f000 80d3 	beq.w	80036b4 <_printf_i+0x1c8>
 800350e:	2f58      	cmp	r7, #88	@ 0x58
 8003510:	f000 80ba 	beq.w	8003688 <_printf_i+0x19c>
 8003514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800351c:	e03a      	b.n	8003594 <_printf_i+0xa8>
 800351e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003522:	2b15      	cmp	r3, #21
 8003524:	d8f6      	bhi.n	8003514 <_printf_i+0x28>
 8003526:	a101      	add	r1, pc, #4	@ (adr r1, 800352c <_printf_i+0x40>)
 8003528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800352c:	08003585 	.word	0x08003585
 8003530:	08003599 	.word	0x08003599
 8003534:	08003515 	.word	0x08003515
 8003538:	08003515 	.word	0x08003515
 800353c:	08003515 	.word	0x08003515
 8003540:	08003515 	.word	0x08003515
 8003544:	08003599 	.word	0x08003599
 8003548:	08003515 	.word	0x08003515
 800354c:	08003515 	.word	0x08003515
 8003550:	08003515 	.word	0x08003515
 8003554:	08003515 	.word	0x08003515
 8003558:	0800369b 	.word	0x0800369b
 800355c:	080035c3 	.word	0x080035c3
 8003560:	08003655 	.word	0x08003655
 8003564:	08003515 	.word	0x08003515
 8003568:	08003515 	.word	0x08003515
 800356c:	080036bd 	.word	0x080036bd
 8003570:	08003515 	.word	0x08003515
 8003574:	080035c3 	.word	0x080035c3
 8003578:	08003515 	.word	0x08003515
 800357c:	08003515 	.word	0x08003515
 8003580:	0800365d 	.word	0x0800365d
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6032      	str	r2, [r6, #0]
 800358c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003594:	2301      	movs	r3, #1
 8003596:	e09e      	b.n	80036d6 <_printf_i+0x1ea>
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	6820      	ldr	r0, [r4, #0]
 800359c:	1d19      	adds	r1, r3, #4
 800359e:	6031      	str	r1, [r6, #0]
 80035a0:	0606      	lsls	r6, r0, #24
 80035a2:	d501      	bpl.n	80035a8 <_printf_i+0xbc>
 80035a4:	681d      	ldr	r5, [r3, #0]
 80035a6:	e003      	b.n	80035b0 <_printf_i+0xc4>
 80035a8:	0645      	lsls	r5, r0, #25
 80035aa:	d5fb      	bpl.n	80035a4 <_printf_i+0xb8>
 80035ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035b0:	2d00      	cmp	r5, #0
 80035b2:	da03      	bge.n	80035bc <_printf_i+0xd0>
 80035b4:	232d      	movs	r3, #45	@ 0x2d
 80035b6:	426d      	negs	r5, r5
 80035b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035bc:	230a      	movs	r3, #10
 80035be:	4859      	ldr	r0, [pc, #356]	@ (8003724 <_printf_i+0x238>)
 80035c0:	e011      	b.n	80035e6 <_printf_i+0xfa>
 80035c2:	6821      	ldr	r1, [r4, #0]
 80035c4:	6833      	ldr	r3, [r6, #0]
 80035c6:	0608      	lsls	r0, r1, #24
 80035c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80035cc:	d402      	bmi.n	80035d4 <_printf_i+0xe8>
 80035ce:	0649      	lsls	r1, r1, #25
 80035d0:	bf48      	it	mi
 80035d2:	b2ad      	uxthmi	r5, r5
 80035d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80035d6:	6033      	str	r3, [r6, #0]
 80035d8:	bf14      	ite	ne
 80035da:	230a      	movne	r3, #10
 80035dc:	2308      	moveq	r3, #8
 80035de:	4851      	ldr	r0, [pc, #324]	@ (8003724 <_printf_i+0x238>)
 80035e0:	2100      	movs	r1, #0
 80035e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035e6:	6866      	ldr	r6, [r4, #4]
 80035e8:	2e00      	cmp	r6, #0
 80035ea:	bfa8      	it	ge
 80035ec:	6821      	ldrge	r1, [r4, #0]
 80035ee:	60a6      	str	r6, [r4, #8]
 80035f0:	bfa4      	itt	ge
 80035f2:	f021 0104 	bicge.w	r1, r1, #4
 80035f6:	6021      	strge	r1, [r4, #0]
 80035f8:	b90d      	cbnz	r5, 80035fe <_printf_i+0x112>
 80035fa:	2e00      	cmp	r6, #0
 80035fc:	d04b      	beq.n	8003696 <_printf_i+0x1aa>
 80035fe:	4616      	mov	r6, r2
 8003600:	fbb5 f1f3 	udiv	r1, r5, r3
 8003604:	fb03 5711 	mls	r7, r3, r1, r5
 8003608:	5dc7      	ldrb	r7, [r0, r7]
 800360a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800360e:	462f      	mov	r7, r5
 8003610:	42bb      	cmp	r3, r7
 8003612:	460d      	mov	r5, r1
 8003614:	d9f4      	bls.n	8003600 <_printf_i+0x114>
 8003616:	2b08      	cmp	r3, #8
 8003618:	d10b      	bne.n	8003632 <_printf_i+0x146>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	07df      	lsls	r7, r3, #31
 800361e:	d508      	bpl.n	8003632 <_printf_i+0x146>
 8003620:	6923      	ldr	r3, [r4, #16]
 8003622:	6861      	ldr	r1, [r4, #4]
 8003624:	4299      	cmp	r1, r3
 8003626:	bfde      	ittt	le
 8003628:	2330      	movle	r3, #48	@ 0x30
 800362a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800362e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003632:	1b92      	subs	r2, r2, r6
 8003634:	6122      	str	r2, [r4, #16]
 8003636:	464b      	mov	r3, r9
 8003638:	4621      	mov	r1, r4
 800363a:	4640      	mov	r0, r8
 800363c:	f8cd a000 	str.w	sl, [sp]
 8003640:	aa03      	add	r2, sp, #12
 8003642:	f7ff fee1 	bl	8003408 <_printf_common>
 8003646:	3001      	adds	r0, #1
 8003648:	d14a      	bne.n	80036e0 <_printf_i+0x1f4>
 800364a:	f04f 30ff 	mov.w	r0, #4294967295
 800364e:	b004      	add	sp, #16
 8003650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	2778      	movs	r7, #120	@ 0x78
 800365e:	4832      	ldr	r0, [pc, #200]	@ (8003728 <_printf_i+0x23c>)
 8003660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	6831      	ldr	r1, [r6, #0]
 8003668:	061f      	lsls	r7, r3, #24
 800366a:	f851 5b04 	ldr.w	r5, [r1], #4
 800366e:	d402      	bmi.n	8003676 <_printf_i+0x18a>
 8003670:	065f      	lsls	r7, r3, #25
 8003672:	bf48      	it	mi
 8003674:	b2ad      	uxthmi	r5, r5
 8003676:	6031      	str	r1, [r6, #0]
 8003678:	07d9      	lsls	r1, r3, #31
 800367a:	bf44      	itt	mi
 800367c:	f043 0320 	orrmi.w	r3, r3, #32
 8003680:	6023      	strmi	r3, [r4, #0]
 8003682:	b11d      	cbz	r5, 800368c <_printf_i+0x1a0>
 8003684:	2310      	movs	r3, #16
 8003686:	e7ab      	b.n	80035e0 <_printf_i+0xf4>
 8003688:	4826      	ldr	r0, [pc, #152]	@ (8003724 <_printf_i+0x238>)
 800368a:	e7e9      	b.n	8003660 <_printf_i+0x174>
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	f023 0320 	bic.w	r3, r3, #32
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	e7f6      	b.n	8003684 <_printf_i+0x198>
 8003696:	4616      	mov	r6, r2
 8003698:	e7bd      	b.n	8003616 <_printf_i+0x12a>
 800369a:	6833      	ldr	r3, [r6, #0]
 800369c:	6825      	ldr	r5, [r4, #0]
 800369e:	1d18      	adds	r0, r3, #4
 80036a0:	6961      	ldr	r1, [r4, #20]
 80036a2:	6030      	str	r0, [r6, #0]
 80036a4:	062e      	lsls	r6, r5, #24
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	d501      	bpl.n	80036ae <_printf_i+0x1c2>
 80036aa:	6019      	str	r1, [r3, #0]
 80036ac:	e002      	b.n	80036b4 <_printf_i+0x1c8>
 80036ae:	0668      	lsls	r0, r5, #25
 80036b0:	d5fb      	bpl.n	80036aa <_printf_i+0x1be>
 80036b2:	8019      	strh	r1, [r3, #0]
 80036b4:	2300      	movs	r3, #0
 80036b6:	4616      	mov	r6, r2
 80036b8:	6123      	str	r3, [r4, #16]
 80036ba:	e7bc      	b.n	8003636 <_printf_i+0x14a>
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	2100      	movs	r1, #0
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	6032      	str	r2, [r6, #0]
 80036c4:	681e      	ldr	r6, [r3, #0]
 80036c6:	6862      	ldr	r2, [r4, #4]
 80036c8:	4630      	mov	r0, r6
 80036ca:	f000 f859 	bl	8003780 <memchr>
 80036ce:	b108      	cbz	r0, 80036d4 <_printf_i+0x1e8>
 80036d0:	1b80      	subs	r0, r0, r6
 80036d2:	6060      	str	r0, [r4, #4]
 80036d4:	6863      	ldr	r3, [r4, #4]
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	2300      	movs	r3, #0
 80036da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036de:	e7aa      	b.n	8003636 <_printf_i+0x14a>
 80036e0:	4632      	mov	r2, r6
 80036e2:	4649      	mov	r1, r9
 80036e4:	4640      	mov	r0, r8
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	47d0      	blx	sl
 80036ea:	3001      	adds	r0, #1
 80036ec:	d0ad      	beq.n	800364a <_printf_i+0x15e>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	079b      	lsls	r3, r3, #30
 80036f2:	d413      	bmi.n	800371c <_printf_i+0x230>
 80036f4:	68e0      	ldr	r0, [r4, #12]
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	4298      	cmp	r0, r3
 80036fa:	bfb8      	it	lt
 80036fc:	4618      	movlt	r0, r3
 80036fe:	e7a6      	b.n	800364e <_printf_i+0x162>
 8003700:	2301      	movs	r3, #1
 8003702:	4632      	mov	r2, r6
 8003704:	4649      	mov	r1, r9
 8003706:	4640      	mov	r0, r8
 8003708:	47d0      	blx	sl
 800370a:	3001      	adds	r0, #1
 800370c:	d09d      	beq.n	800364a <_printf_i+0x15e>
 800370e:	3501      	adds	r5, #1
 8003710:	68e3      	ldr	r3, [r4, #12]
 8003712:	9903      	ldr	r1, [sp, #12]
 8003714:	1a5b      	subs	r3, r3, r1
 8003716:	42ab      	cmp	r3, r5
 8003718:	dcf2      	bgt.n	8003700 <_printf_i+0x214>
 800371a:	e7eb      	b.n	80036f4 <_printf_i+0x208>
 800371c:	2500      	movs	r5, #0
 800371e:	f104 0619 	add.w	r6, r4, #25
 8003722:	e7f5      	b.n	8003710 <_printf_i+0x224>
 8003724:	080038b3 	.word	0x080038b3
 8003728:	080038c4 	.word	0x080038c4

0800372c <memmove>:
 800372c:	4288      	cmp	r0, r1
 800372e:	b510      	push	{r4, lr}
 8003730:	eb01 0402 	add.w	r4, r1, r2
 8003734:	d902      	bls.n	800373c <memmove+0x10>
 8003736:	4284      	cmp	r4, r0
 8003738:	4623      	mov	r3, r4
 800373a:	d807      	bhi.n	800374c <memmove+0x20>
 800373c:	1e43      	subs	r3, r0, #1
 800373e:	42a1      	cmp	r1, r4
 8003740:	d008      	beq.n	8003754 <memmove+0x28>
 8003742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800374a:	e7f8      	b.n	800373e <memmove+0x12>
 800374c:	4601      	mov	r1, r0
 800374e:	4402      	add	r2, r0
 8003750:	428a      	cmp	r2, r1
 8003752:	d100      	bne.n	8003756 <memmove+0x2a>
 8003754:	bd10      	pop	{r4, pc}
 8003756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800375a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800375e:	e7f7      	b.n	8003750 <memmove+0x24>

08003760 <_sbrk_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	2300      	movs	r3, #0
 8003764:	4d05      	ldr	r5, [pc, #20]	@ (800377c <_sbrk_r+0x1c>)
 8003766:	4604      	mov	r4, r0
 8003768:	4608      	mov	r0, r1
 800376a:	602b      	str	r3, [r5, #0]
 800376c:	f7fc ff5c 	bl	8000628 <_sbrk>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_sbrk_r+0x1a>
 8003774:	682b      	ldr	r3, [r5, #0]
 8003776:	b103      	cbz	r3, 800377a <_sbrk_r+0x1a>
 8003778:	6023      	str	r3, [r4, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	2000028c 	.word	0x2000028c

08003780 <memchr>:
 8003780:	4603      	mov	r3, r0
 8003782:	b510      	push	{r4, lr}
 8003784:	b2c9      	uxtb	r1, r1
 8003786:	4402      	add	r2, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	4618      	mov	r0, r3
 800378c:	d101      	bne.n	8003792 <memchr+0x12>
 800378e:	2000      	movs	r0, #0
 8003790:	e003      	b.n	800379a <memchr+0x1a>
 8003792:	7804      	ldrb	r4, [r0, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	428c      	cmp	r4, r1
 8003798:	d1f6      	bne.n	8003788 <memchr+0x8>
 800379a:	bd10      	pop	{r4, pc}

0800379c <memcpy>:
 800379c:	440a      	add	r2, r1
 800379e:	4291      	cmp	r1, r2
 80037a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80037a4:	d100      	bne.n	80037a8 <memcpy+0xc>
 80037a6:	4770      	bx	lr
 80037a8:	b510      	push	{r4, lr}
 80037aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b4:	d1f9      	bne.n	80037aa <memcpy+0xe>
 80037b6:	bd10      	pop	{r4, pc}

080037b8 <_realloc_r>:
 80037b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037bc:	4680      	mov	r8, r0
 80037be:	4615      	mov	r5, r2
 80037c0:	460c      	mov	r4, r1
 80037c2:	b921      	cbnz	r1, 80037ce <_realloc_r+0x16>
 80037c4:	4611      	mov	r1, r2
 80037c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80037ca:	f7ff bc39 	b.w	8003040 <_malloc_r>
 80037ce:	b92a      	cbnz	r2, 80037dc <_realloc_r+0x24>
 80037d0:	f7ff fbcc 	bl	8002f6c <_free_r>
 80037d4:	2400      	movs	r4, #0
 80037d6:	4620      	mov	r0, r4
 80037d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037dc:	f000 f81a 	bl	8003814 <_malloc_usable_size_r>
 80037e0:	4285      	cmp	r5, r0
 80037e2:	4606      	mov	r6, r0
 80037e4:	d802      	bhi.n	80037ec <_realloc_r+0x34>
 80037e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037ea:	d8f4      	bhi.n	80037d6 <_realloc_r+0x1e>
 80037ec:	4629      	mov	r1, r5
 80037ee:	4640      	mov	r0, r8
 80037f0:	f7ff fc26 	bl	8003040 <_malloc_r>
 80037f4:	4607      	mov	r7, r0
 80037f6:	2800      	cmp	r0, #0
 80037f8:	d0ec      	beq.n	80037d4 <_realloc_r+0x1c>
 80037fa:	42b5      	cmp	r5, r6
 80037fc:	462a      	mov	r2, r5
 80037fe:	4621      	mov	r1, r4
 8003800:	bf28      	it	cs
 8003802:	4632      	movcs	r2, r6
 8003804:	f7ff ffca 	bl	800379c <memcpy>
 8003808:	4621      	mov	r1, r4
 800380a:	4640      	mov	r0, r8
 800380c:	f7ff fbae 	bl	8002f6c <_free_r>
 8003810:	463c      	mov	r4, r7
 8003812:	e7e0      	b.n	80037d6 <_realloc_r+0x1e>

08003814 <_malloc_usable_size_r>:
 8003814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003818:	1f18      	subs	r0, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	bfbc      	itt	lt
 800381e:	580b      	ldrlt	r3, [r1, r0]
 8003820:	18c0      	addlt	r0, r0, r3
 8003822:	4770      	bx	lr

08003824 <_init>:
 8003824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003826:	bf00      	nop
 8003828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382a:	bc08      	pop	{r3}
 800382c:	469e      	mov	lr, r3
 800382e:	4770      	bx	lr

08003830 <_fini>:
 8003830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003832:	bf00      	nop
 8003834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003836:	bc08      	pop	{r3}
 8003838:	469e      	mov	lr, r3
 800383a:	4770      	bx	lr
